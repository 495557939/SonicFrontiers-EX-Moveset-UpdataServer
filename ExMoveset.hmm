Code "ExMoveset"  by "Luna Trepe Hyper Weezley StarNoodle495"
//Air+Y Free Falling
//Air+B_Hold Higher Bounce Jump
//RT+A Free Bump Jump
//RT+A+X Easy EX Homing Boost
//RT+B Free Drift
//A to Jumpboard Free Release Jumpboard
//X to Spring Board Dash
//A-A Higher Double Jump
//A-A Lost world style curve homing trajectory
//A-X Gens Style Lite No Homing Attack
//LT Fast Stomp+SpinDash
//LT+RT Forward Stomp SpinDash
//Grind+LT Spin in Grind to acceleration
//Grind+Y Grind Reverse move
//Grind+X Lite Grind accelerate
//Grind+B Grind End Jump Ready
//RT Cloud Fly Air Boost
//A-A HomingAttack
//Y-Y in Air to Free Battle Quick Cyloop
//B-B Unleashed style SweepKick
//B+LB/RB QSS
//Walk M-Speed

	#load "System.Numerics.dll"
	
	#include "BlackboardStatus" noemit
    #include "Reflection" noemit
	
	#lib "BlackboardStatus"
    #lib "Reflection"
    #lib "Player"
	
	#lib "SonicParameters"
	#lib "XInput"
	#lib "HMM"
	#lib "INI"
	
	using System;
	using System.Numerics;
	using System.Collections.Generic;
	
//static List

    static List<Sonic.StateID> SonicInNormalAir = new()
    {
		Sonic.StateID.StateFall,
		Sonic.StateID.StateFan,
		Sonic.StateID.StateJump,
		Sonic.StateID.StateFallFlip,
		Sonic.StateID.StateGrindJump,
		Sonic.StateID.StateBounceJump,
		Sonic.StateID.StateRecoveryJump,
		Sonic.StateID.StateGrindDamageAir,
		Sonic.StateID.StateGrindDoubleJump,
		Sonic.StateID.StateJumpBoardLaunch,
		Sonic.StateID.StateQuickStepDoubleJump,
		Sonic.StateID.StateSpringJump,
		Sonic.StateID.StateLightDash,
		Sonic.StateID.StateAirBoost,
		Sonic.StateID.StateWallJump,
		Sonic.StateID.StateBumpJump,
		Sonic.StateID.StateStompingDown,
		Sonic.StateID.StateQuickStepJump,
		Sonic.StateID.StateSpinBoostCharge,
		Sonic.StateID.StateStompingBounce,
		Sonic.StateID.StateDoubleJump,
		Sonic.StateID.StateCloudJump,
		Sonic.StateID.StateHomingAttack,
		Sonic.StateID.StateHomingAttackRoot,
		Sonic.StateID.StateHomingFinished,
		Sonic.StateID.StateHomingRepelled,
		Sonic.StateID.StateWallJump
    }
	
	//use ini config
	static bool IsConfigInitialised = false;
	static string currentModDirectory;
	
	///// ON OFF SETTINGS default
	//BasicPhysics
	static bool UseHigherDoubleJump=true;
	static bool UseHigherBounceJump=true;
	static bool UseFasterDropDash=true;
	static bool UseFasterBoost=true;
	
	//Function
	static bool UseExFreeBumpJump=true;
	static bool UseFastFreeBumpJump=true;
	static bool UseExFreeFall=true;
	static bool UseExFreeFallAirBoost=true;
	static bool UseExDrift=true;
	static bool UseExHomingCurve=true;
	static bool UseExHomingBoost=true;
	static bool UseExAirSpinDash=true;
	static bool UseExSpringBoardDash=true;
	static bool UseExHomingDash=true;
	static bool UseExFreeCyloop=true;
	static bool UseExGrindActionLT=true;
	static bool UseExGrindActionX=true;
	static bool UseExGrindActionY=true;
	static bool UseExAntiskidShoe=true;
	static bool UseExGrindEndJump=true;
	//Animation
	static bool UseExGoalPoes=true;
	static bool UseExSweepKick=true;
	/////EffectAndCamera
	static bool UseExBoostEffect=true;
	static bool UseBlueTailEffect=true;
	static bool UseExSlideEffect=true;
	//Advanced
	/////Not Easy to Control
	static bool UseExQSS=false;
	static bool UseExMSpeed=false;
	static bool UseStompCurve=false;
	static bool UseStrongHomingDash=false;
	static bool UseCloudFlyBoost=false;
	static bool UseAAHomingAttack=false;
	///LowEnd
	static bool DisableAllExEffect=false;
	/////SETTINGS END
	

// ini Config Example
{
	if (!IsConfigInitialised)
	{
		var modsQuery = HMM.FindModsByName("EX Moveset");
		if (modsQuery.Count == 1)
		{
			currentModDirectory = modsQuery[0].Path;
			string modConfigIniPath = System.IO.Path.Combine(modsQuery[0].Path, "config.ini");
			var ini = INI.Read(modConfigIniPath);
			

			UseHigherDoubleJump = bool.Parse(ini["Main"]["UseHigherDoubleJump"]);
			UseHigherBounceJump = bool.Parse(ini["Main"]["UseHigherBounceJump"]);
			UseFasterDropDash = bool.Parse(ini["Main"]["UseFasterDropDash"]);
			UseFasterBoost = bool.Parse(ini["Main"]["UseFasterBoost"]);
			
			UseExFreeBumpJump = bool.Parse(ini["Main"]["UseExFreeBumpJump"]);
			UseFastFreeBumpJump = bool.Parse(ini["Main"]["UseFastFreeBumpJump"]);
			UseExFreeFall = bool.Parse(ini["Main"]["UseExFreeFall"]);
			UseExFreeFallAirBoost = bool.Parse(ini["Main"]["UseExFreeFallAirBoost"]);
			UseExDrift = bool.Parse(ini["Main"]["UseExDrift"]);
			UseExHomingCurve = bool.Parse(ini["Main"]["UseExHomingCurve"]);
			UseExHomingBoost = bool.Parse(ini["Main"]["UseExHomingBoost"]);
			UseExAirSpinDash = bool.Parse(ini["Main"]["UseExAirSpinDash"]);
			UseExSpringBoardDash = bool.Parse(ini["Main"]["UseExSpringBoardDash"]);
			UseExHomingDash = bool.Parse(ini["Main"]["UseExHomingDash"]);
			UseExFreeCyloop = bool.Parse(ini["Main"]["UseExFreeCyloop"]);
			UseExGrindActionLT = bool.Parse(ini["Main"]["UseExGrindActionLT"]);
			UseExGrindActionX = bool.Parse(ini["Main"]["UseExGrindActionX"]);
			UseExGrindActionY = bool.Parse(ini["Main"]["UseExGrindActionY"]);
			UseExAntiskidShoe = bool.Parse(ini["Main"]["UseExAntiskidShoe"]);
			UseExGrindEndJump = bool.Parse(ini["Main"]["UseExGrindEndJump"]);
			
			UseExGoalPoes = bool.Parse(ini["Main"]["UseExGoalPoes"]);
			UseExSweepKick = bool.Parse(ini["Main"]["UseExSweepKick"]);
			
			UseExBoostEffect = bool.Parse(ini["Main"]["UseExBoostEffect"]);
			UseBlueTailEffect = bool.Parse(ini["Main"]["UseBlueTailEffect"]);
			UseExSlideEffect = bool.Parse(ini["Main"]["UseExSlideEffect"]);
			
			UseExQSS = bool.Parse(ini["Main"]["UseExQSS"]);
			UseExMSpeed = bool.Parse(ini["Main"]["UseExMSpeed"]);
			UseStompCurve = bool.Parse(ini["Main"]["UseStompCurve"]);
			UseStrongHomingDash = bool.Parse(ini["Main"]["UseStrongHomingDash"]);
			UseCloudFlyBoost = bool.Parse(ini["Main"]["UseCloudFlyBoost"]);
			UseAAHomingAttack = bool.Parse(ini["Main"]["UseAAHomingAttack"]);
		}else{
			Console.WriteLine($"[EX Moveset] Failed to locate mod directory.");
			return;
		}
		IsConfigInitialised = true;
	}
}
	
//Basic Physics
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	if (SonicParametersInfo.pData == null)
	return;
	
	if(UseStompCurve||UseExSweepKick)
	{
	RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.stomping.initialSpeed, 35.0f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.stomping.initialSpeed, 35.0f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.stomping.landingCancelTime, 1.0f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.stomping.landingCancelTime, 1.0f);
	
	RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.sliding.minContinueTime, 5.0f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.sliding.minContinueTime, 5.0f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.sliding.maxAutoRunTime, 5.0f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.sliding.maxAutoRunTime, 5.0f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.sliding.endSpeedAutoRun, 0.2f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.sliding.endSpeedAutoRun, 0.2f);
	}
	
	if(UseExSweepKick)
	{
	RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.sliding.damageRate, 2.5f);
	}
	
	if(UseExQSS)
	{
	RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.quickstep.acceleForce, 5f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.quickstep.acceleForce, 5f);	
	RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.quickstep.avoidForce, 5f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.quickstep.avoidForce, 5f);	
	}
	
	
	//RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.spawnTime, 0.5f);
	//RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.spanTime, -0.5f);
	//RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.launchWaitTime, 0.05f);
	//RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.spiralWaitTime, 0.05f);
	//RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.whiteoutBeginTime, 0.05f);
	//RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.spinSpeedPostLaunch, -1f);
	//RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.sonic.spinRadius, -3.5f);
	//RFL_SET_PARAM(SonicParametersInfo, common.sonicboomSet.sonic.fallSpeed, 0.22f);
	//RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.sonic.chargeTime, 0.05f);
	//RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.sonic.bounceTime, 0.05f);
	//RFL_SET_PARAM(SonicParametersInfo, common.slingshot.hitStartRestTime, 0f);
	//RFL_SET_PARAM(SonicParametersInfo, common.slingshot.hitTimeScaleValue, 0f);
	//RFL_SET_PARAM(SonicParametersInfo, common.slingshot.hitTimeScaleTimeEaseIn, 0f);
	
	
	if(UseExDrift)
	{
	RFL_SET_PARAM(SonicParametersInfo, forwardView.drift.startAngle, 50.0f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.startAngle, 50.0f);
	
	RFL_SET_PARAM(SonicParametersInfo, forwardView.drift.minSpeed, 125.0f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minSpeed, 125.0f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.drift.minSpeedMax, 125.0f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minSpeedMax, 125.0f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.drift.maxSpeed, 150.0f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxSpeed, 150.0f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.drift.maxSpeedMax, 150.0f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxSpeedMax, 150.0f);
	
	RFL_SET_PARAM(SonicParametersInfo, forwardView.drift.minBoostSpeed, 177.7f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minBoostSpeed, 177.7f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.drift.minBoostSpeedMax, 177.7f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minBoostSpeedMax, 177.7f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.drift.maxBoostSpeed, 177.7f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxBoostSpeed, 177.7f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.drift.maxBoostSpeedMax, 177.7f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxBoostSpeedMax, 177.7f);
	
	RFL_SET_PARAM(SonicParametersInfo, forwardView.drift.accel, 0.0f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.accel, 0.0f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.drift.brake, 0.0f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.brake, 0.0f);
	
	RFL_SET_PARAM(SonicParametersInfo, forwardView.drift.neutralSteerAccel, 1.0f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.neutralSteerAccel, 1.0f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.drift.steerAccel, 1.28f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.steerAccel, 1.28f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.drift.maxSteerAngle, 0.01f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxSteerAngle, 0.01f);
	
	RFL_SET_PARAM(SonicParametersInfo, forwardView.driftDash.outOfControlSpeed, 0.0f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.driftDash.outOfControlSpeed, 0.0f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.driftDash.checkDashSpeed, 99999999.0f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.driftDash.checkDashSpeed, 99999999.0f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.driftDash.checkDashTime, 0.21f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.driftDash.checkDashTime, 0.21f);
	}
	
	//RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.jumpSpeed.rotationForce, 440f);
	//RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.jumpSpeed.rotationForce, 440f);
	
	//RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.grind.maxSpeed, 20f);
	//RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.grind.maxSpeed, 20f);
	
	//RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.diving.normal.acceleHorzForce, 35f);
	//RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.diving.normal.acceleHorzForce, 35f);
	
	//RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.diving.normal.maxHorzSpeed, 3.25f);
	//RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.diving.normal.maxHorzSpeed, 3.25f);
	
	if(UseExFreeFall)
	{
	//RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.diving.deceleVertForce, 22f);
	//RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.diving.deceleVertForce, 22f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.fall.rotationForce, 220f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.fall.rotationForce, 220f);
	}
	
	RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.slidedown.time, 6f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.slidedown.time, 6f);
	
	if(UseFasterBoost)
	{
	RFL_SET_PARAM(SonicParametersInfo, forwardView.boarding.maxSpeed, 32f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.maxSpeed, 32f);
	
	RFL_SET_PARAM(SonicParametersInfo, forwardView.boarding.steeringSpeed1, 14f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.steeringSpeed1, 14f);
	
	RFL_SET_PARAM(SonicParametersInfo, forwardView.boarding.steeringSpeed2, 120f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.steeringSpeed2, 120f);
	}
	
	if(UseFasterDropDash)
	{
	RFL_SET_PARAM(SonicParametersInfo, forwardView.dropDash.maxChargeTime, 1280f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.dropDash.maxChargeTime, 1280f);
	
	RFL_SET_PARAM(SonicParametersInfo, forwardView.dropDash.minDashSpeed, 255f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.dropDash.minDashSpeed, 255f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.dropDash.minDashSpeedMax, 300f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.dropDash.minDashSpeedMax, 300f);
	
	RFL_SET_PARAM(SonicParametersInfo, forwardView.dropDash.maxDashSpeed, 260f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.dropDash.maxDashSpeed, 260f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.dropDash.maxDashSpeedMax, 60f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.dropDash.maxDashSpeedMax, 60f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.dropDash.tumbleDashSpeed, 260f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.dropDash.tumbleDashSpeed, 260f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.dropDash.maxSpeed, 180f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.dropDash.maxSpeed, 180f);
	
	RFL_SET_PARAM(SonicParametersInfo, forwardView.dropDash.steeringSpeed1, 260f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.dropDash.steeringSpeed1, 260f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.dropDash.steeringSpeed2, 260f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.dropDash.steeringSpeed2, 260f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.dropDash.outOfControlSpeed, 99999999f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.dropDash.outOfControlSpeed, 99999999f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.dropDash.checkDashTime, 1.5f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.dropDash.checkDashTime, 1.5f);
	}
	
	//RFL_SET_PARAM(SonicParametersInfo, forwardView.lightDash.brake, 8f);
	//RFL_SET_PARAM(SonicParametersInfo, cyberspace.lightDash.brake, 155f);
	
}
	
	
	static int LoopTimeTrigger=0;
	static bool IsStateSonicNotDead = true;
	static bool IsStateInNormalAir=false;
	//static bool FreeFallStart = false;
	static bool IsStateNowMSpeed = false;
	
	static bool IsStateHoldBoost = false;
	static bool IsStateHoldStomp = false;
	static bool IsStateHoldJump = false;
	static bool IsStateHoldSpin = false;
	static bool IsStateHoldLB = false;
	static bool IsStateHoldRB = false;
	
	static Vector3 LastPosition;
	static Vector3 LastVelocity;
	static Quaternion LastRotation;
	static bool SonicNowStop=false;
	
	static bool IsStateCustomDiving = false;
	static bool IsStateFristDiving = true;
	static float ExDivingAnimation=0f;
	//Diving Start Animation Time 0f=off  1+=on
	
	static bool IsStateAirBoostOn = true;
	static bool IsStateAfterBounceJump=false;
	
	static bool IsSpringBoardDashReady = false;
	static bool IsSpringBoardDash = false;
	static float SpringBoardDashStop=5.0f;

	static bool IsNoHomingDashReady=false;
	static bool IsNoHomingDash=false;
	static float NoHomingDashTime=0.0f;
	
	static bool NowSweepKick1=false;
	static bool NowSweepKick2=false;
	static float DoubleSquatReady=0f;
	static float SweepKickAnmTime=0f;
	static float GrindAnmTime=0f;
	static bool BumpAnmStart=false;
	
	
	static bool SonicNowStomp=false;
	static Vector3 StompVelocity;
	static Vector3 SlidingVelocity;
	//static float SlidingJumpSpeed=0f;
	//static bool SlJumpSpeedUp=false;
	static int SlidingToJumpReady=0;
	//0=false 1=ReadyToJump 2+=JumpToSpeedUp
	
	static float InNormalAirTime=0.0f;
	static int NewAirBoost=-1;
	
	
///////////////////////////////////////////////LoopTimeTrigger

//LoopTimeTrigger
//Use  LoopTimeTrigger%2!=0  to Loop On Off

	if(LoopTimeTrigger<10)
	{
		LoopTimeTrigger+=1;
	}else{
		LoopTimeTrigger=0;
	}
	
	if(SonicInNormalAir.Contains(Player.State.GetCurrentStateID<Sonic.StateID>())
	||IS_STATE_FLAG(IsHoming)
	){
		InNormalAirTime+=0.01f;
	}else{
		InNormalAirTime=0f;
	}
	
///////////////////////////////////////////////////////////////Button On Off
//////////////////////////////////////////IsStateHold???
//Spin LT
if(Player.Input.IsPressed(Player.InputActionType.PlayerSonicboom))
{IsStateHoldSpin=true;}
if(Player.Input.IsReleased(Player.InputActionType.PlayerSonicboom))
{IsStateHoldSpin=false;}

//Boost X
if (Player.Input.IsPressed(Player.InputActionType.PlayerBoost))
{IsStateHoldBoost = true;}
if (Player.Input.IsReleased(Player.InputActionType.PlayerBoost))
{IsStateHoldBoost = false;}
//Stomp B
if (Player.Input.IsPressed(Player.InputActionType.PlayerStomping))
{IsStateHoldStomp = true;}
if (Player.Input.IsReleased(Player.InputActionType.PlayerStomping))
{IsStateHoldStomp = false;}
//Jump A
if (Player.Input.IsPressed(Player.InputActionType.PlayerJump))
{IsStateHoldJump=true;}
if (Player.Input.IsReleased(Player.InputActionType.PlayerJump))
{IsStateHoldJump=false;}

//LB
if (Player.Input.IsPressed(Player.InputActionType.PlayerLeftStep))
{IsStateHoldLB = true;}
if (Player.Input.IsReleased(Player.InputActionType.PlayerLeftStep))
{IsStateHoldLB = false;}
//RB
if (Player.Input.IsPressed(Player.InputActionType.PlayerRightStep))
{IsStateHoldRB = true;}
if (Player.Input.IsReleased(Player.InputActionType.PlayerRightStep))
{IsStateHoldRB = false;}


//////////////////////kinematics to Length
/////////////////Kinematics GET by Trepe

var kinematics = Player.Kinematics.Get();
if (kinematics == null)
return;
float mag = kinematics->Velocity.Length();// Define velocity on X/Y/Z axes
float horzMag = Player.Kinematics.GetHorizontalMagnitude();// Define velocity only on X axis

if (Player.GetPlayerType() != Player.PlayerType.Sonic)
return;

/////////////////////////////////////////////////////////////
//Infinite Dead Bug Fix
if(
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateFallingDead||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateDead||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateLavaDead||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StatePressDead||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateSuffocatingDead||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateUpDead||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateFallWithKodama||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateFallWithCannonball||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateJumpWithKodama||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateRunWithKodama||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateRunWithCannonball||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateStandWithKodama||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateStandWithCannonball||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateWithAnimalRoot||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateWithAnimalRoot||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateGoal||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateGoal2||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateFixedGoal||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateTalkMode||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateThrowCannonball||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateTakeBehindSS||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateTakeBehind||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateHangPole||
Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateUpDownPole||
IS_WORLD_FLAG(IsDead)
){
	IsStateSonicNotDead = false;
	LoopTimeTrigger=-1;
}else{
	if(LoopTimeTrigger==9)
	{
	IsStateSonicNotDead = true;
	}
}

///////////////////////////////////////LoopTimeTrigger in Game
////// Sonic is Stop Now?
////// LastPosition=???
////// LastVelocity=???
//for fix sound loop play in pause time


if(LastPosition==kinematics->Position){
	SonicNowStop=true;
}else{
	SonicNowStop=false;
}

	
///////////////////////////////////////////////Dead State ID initialization
if (!IsStateSonicNotDead)
{
	IsStateHoldBoost = false;
	IsStateHoldStomp = false;
	IsStateHoldJump = false;
	IsStateHoldSpin = false;
	IsStateHoldLB = false;
	IsStateHoldRB = false;
	IsSpringBoardDashReady=false;
	SpringBoardDashStop=5.0f;
	IsSpringBoardDash=false;
	IsNoHomingDash=false;
	NoHomingDashTime=10.0f;
	IsStateInNormalAir=false;
}


////////////////////////////It's normal in the air state
if(SonicInNormalAir.Contains(Player.State.GetCurrentStateID<Sonic.StateID>())
||IS_STATE_FLAG(IsHoming)
){
	IsStateInNormalAir=true;
}else{
	IsStateInNormalAir=false;
}
if(Player.Status.IsGrounded()){IsStateInNormalAir=false;}
	

/////////////////////////////////Air Boost ON OFF
if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateAirBoost){
	IsStateAirBoostOn = false;
}

if(Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateAirBoost
&&!IsStateAirBoostOn
){
	Player.State.Discard(Sonic.StateID.StateAirBoost);
}

if(Player.Status.IsGrounded()
||Player.Status.IsGroundedSpecial()
||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateJumpBoardLaunch
||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpringJump
||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStompingFlip
||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStompingBounce
||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateHomingFinished
||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateHomingAttack
||IS_WORLD_FLAG(IsAutoRun)
){
	Player.State.Restore(Sonic.StateID.StateAirBoost);
}


//////////////////////XInput by Hyper

	var joystick = XInput.GetAnalog(0);//X Y Max = 32767.0f
    float joystickX = 0.0f;
    float joystickY = 0.0f;
	
	if(joystick!=null
	&&joystick.X<1.0f
	&&joystick.Y<1.0f
	&&joystick.X>-1.0f
	&&joystick.Y>-1.0f
	){
		joystickX=joystick.X;
		joystickX=joystick.Y;
	}
	
	if(joystickX<0){joystickX*=-1f;}
	if(joystickY<0){joystickX*=-1f;}
	
	
/////////////////////////////////Update3 Battle state fix IsBattle
bool NowInBattleState=false;
if(
	IS_WORLD_FLAG(IsBattle)
	&&!IS_WORLD_FLAG(IsAutoRun)
	&&!IS_STATE_FLAG(IsSpringJump)
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateSpringJump
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateJumpBoardLaunch
){
	NowInBattleState=true;
}
	
	
	
/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////Start///////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

//OpenWorldOlny(old)
//if (BlackboardStatus.Get() != null && !IS_WORLD_FLAG(IsCyberSpace)){

//ALL Stage
if (BlackboardStatus.Get() != null
&&!BlackboardStatus.IsSuper()
){
/////////////////////////////////////////////////////////////








//Cloud Boost

if (UseCloudFlyBoost
){

//Boost edit
	
	if(Player.Status.IsGrounded()
	&&Player.Status.IsGroundedSpecial()
	){
		if(IS_STATE_FLAG(IsBoost)&&mag<40f){
			kinematics->Velocity +=Player.Kinematics.GetForward() * 18.5f;
		}
		if(IS_STATE_FLAG(IsBoost)&&mag<45f){
			kinematics->Velocity +=Player.Kinematics.GetForward() * 8.5f;
		}
	}
		
		
//Air Boost edit
	
	if(!IS_WORLD_FLAG(IsAirTrick)
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateBumpJump
	){
		Player.State.Discard(Sonic.StateID.StateAirBoost);
	}
	
	if (NewAirBoost==-1
	&&InNormalAirTime>0.01f
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateBumpJump
	&&!IS_WORLD_FLAG(IsAirTrick)
	&&Player.Input.IsPressed(Player.InputActionType.PlayerBoost)
	&&!Player.Status.IsSpecialAction()
	){
		Player.State.SetState(Sonic.StateID.StateCloudJump);
		kinematics->Velocity += new Vector3(0.0f, 5.5f, 0.0f);
		SET_STATE_FLAG(IsAirBoost, true);
		NewAirBoost=1;
		if(mag<40f){
			kinematics->Velocity +=Player.Kinematics.GetForward() * 18.5f;
		}
		if(mag<50f){
			kinematics->Velocity +=Player.Kinematics.GetForward() * 8.5f;
		}
		if(kinematics->Velocity.Y<5.5f){
			kinematics->Velocity = new Vector3(0.0f, 5.5f, 0.0f);
		}
		Player.Sound.PlaySound("sn_powerboost");
		Player.Sound.PlaySound("sn_relative_wind");
		Player.Sound.PlaySound("sn_parry_move");
		Player.Effect.PlayEffect("AirBoostFix", "ec_ft_pow_dash_ge01_set01");
		IsStateAirBoostOn=false;
	}
	
	if(NewAirBoost==1
	&&InNormalAirTime>0.01f
	&&Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateCloudJump
	&&Player.Input.IsDown(Player.InputActionType.PlayerBoost)
	&&!Player.Status.IsSpecialAction()
	){
		SET_STATE_FLAG(IsAirBoost, true);
		Player.Animation.SetAnimation("BOOST_AIR");
		if(mag<45f){
			kinematics->Velocity +=Player.Kinematics.GetForward() * 20.5f;
		}
		if(mag<55f){
			kinematics->Velocity +=Player.Kinematics.GetForward() * 5.5f;
		}
		//kinematics->Rotation=LastRotation;
	}
	
	if(!Player.Input.IsDown(Player.InputActionType.PlayerBoost)
	||Player.Status.IsSpecialAction()
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpringJump
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateJumpBoardLaunch
	||IS_STATE_FLAG(IsSpringJump)
	){
		Player.Effect.StopEffect("AirBoostFix");
		int soundSpinLT = Player.Sound.PlaySound("sn_powerboost");
		Player.Sound.StopSound(&soundSpinLT);
	}
	
//idle to boost
	if(SonicNowStop
	&&Player.Input.IsDown(Player.InputActionType.PlayerBoost)
	&&!Player.Status.IsSpecialAction()
	){
		kinematics->Position +=new Vector3(0.0f, 0.01f, 0.0f);
		kinematics->Velocity +=Player.Kinematics.GetForward() * 20.5f;
		Player.Sound.PlaySound("sn_powerboost");
		Player.State.SetState(Sonic.StateID.StateRun);
		SET_STATE_FLAG(IsBoost, true);
	}
	
//Air Boost to Run
	if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateRun
	&&Player.Input.IsDown(Player.InputActionType.PlayerBoost)
	&&!Player.Status.IsSpecialAction()
	){
		SET_STATE_FLAG(IsBoost, true);
	}
	
//Bump Air Boost Fix
	if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateBumpJump
	||IS_WORLD_FLAG(IsAirTrick)
	){
		if(Player.Input.IsDown(Player.InputActionType.PlayerBoost)
		&&Player.Input.IsPressed(Player.InputActionType.PlayerBoost)
		&&!IsStateAirBoostOn
		){
			//Player.State.SetState(Sonic.StateID.StateRecoveryJump);
			Player.State.SetState(Sonic.StateID.StateCloudJump);
			//kinematics->Velocity += new Vector3(0.0f, 5.5f, 0.0f);
			SET_STATE_FLAG(IsAirBoost, true);
			NewAirBoost=1;
			if(mag<40f){
				kinematics->Velocity +=Player.Kinematics.GetForward() * 18.5f;
			}
			if(mag<50f){
				kinematics->Velocity +=Player.Kinematics.GetForward() * 8.5f;
			}
			if(kinematics->Velocity.Y<5.5f){
				kinematics->Velocity = new Vector3(0.0f, 5.5f, 0.0f);
			}
			Player.Sound.PlaySound("sn_powerboost");
			Player.Sound.PlaySound("sn_relative_wind");
			Player.Sound.PlaySound("sn_parry_move");
			Player.Effect.PlayEffect("AirBoostFix", "ec_ft_pow_dash_ge01_set01");
			IsStateAirBoostOn=false;
		}
	}
	
//Drift to Boost Sound Fix

	if(Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateDriftDash
	&&Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateRun
	&&Player.Input.IsDown(Player.InputActionType.PlayerBoost)
	&&IS_STATE_FLAG(IsBoost)
	&&!SonicNowStop
	){
		Player.State.SetState(Sonic.StateID.StateAirBoost);
		Player.Sound.PlaySound("sn_powerboost");
	}
	
//Air Boost End
	if (Player.Status.IsGrounded()
	|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStompingFlip 
	|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStompingBounce 
	|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateHomingAttack
	|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateGrind
	){
		NewAirBoost=-1;
		Player.Effect.StopEffect("AirBoostFix");
	}
	
	
}



////////////////////////////////////////fake M-Speed and D-Speed

	if(
	(joystickX+joystickY<0.75f)
	&&(joystickX+joystickY>0.18f)
	&&UseExMSpeed
	){
		IsStateNowMSpeed=true;
	}else{
		IsStateNowMSpeed=false;
	}
	
	if(IsStateNowMSpeed
	&&!Player.Status.IsGrounded()
	&&!Player.Status.IsGroundedSpecial()
	&&IsStateSonicNotDead
	&&Player.State.GetCurrentStateID<Sonic.StateID>() !=Sonic.StateID.StateHomingAttack
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDamageRoot
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateBumpJump
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateRecoveryJump
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateSliding
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateStompingDown
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDivingRoot
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDiving
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateSpringJump
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateJumpBoardLaunch
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGuard
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrind
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrindDamage
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrindDamageAir
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrindStep
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateHangPole
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateHangPoleJump
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateHomingAttackRoot
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateHomingAttackInStorm
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateHomingFinished
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateHomingRepelled
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateHomingShot
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateLightDash
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDamageRoot
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDamageBlowOff
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDamageBlowOffHeavy
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDamageLava
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDamageQuake
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDamageRunning
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDamageTurnBack
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateAttackRoot
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateSpinBoost
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateSpinBoostCharge
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateWallJump
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateWallActionRoot
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateReflexesPanel
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateReflexesPanelLeftStep
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateReflexesPanelRightStep
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateUpDownPole
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateUpDownPoleDamage
	&&!IS_STATE_FLAG(IsBoost)
	){
		if(horzMag>10f&&horzMag<99f&&!Player.Status.IsGrounded())
		{
			kinematics->Velocity +=new Vector3(kinematics->Velocity.X*0.025f,0f,kinematics->Velocity.Z*0.025f);
		}
		if(horzMag>10f&&horzMag<45f&&!Player.Status.IsGrounded())
		{
			kinematics->Velocity +=new Vector3(kinematics->Velocity.X*0.05f,0f,kinematics->Velocity.Z*0.05f);
		} 
		if(horzMag>=45f&&horzMag<99f&&!Player.Status.IsGrounded())
		{
			kinematics->Velocity +=new Vector3(kinematics->Velocity.X*0.1f,0f,kinematics->Velocity.Z*0.1f);
		}
		
		if(mag>40f
		&&!Player.Status.IsGrounded()
		&&!Player.Status.IsGroundedSpecial()
		&&Player.State.GetCurrentStateID<Sonic.StateID>() !=Sonic.StateID.StateAirBoost
		&&IsStateSonicNotDead
		){
			if(LoopTimeTrigger==0||LoopTimeTrigger==4||LoopTimeTrigger==7)
			{
				Player.Effect.PlayEffect("IsStateNowMSpeedEff1", "ec_ft_landing_sand_sa01_shake01");
				Player.Effect.PlayEffect("IsStateNowMSpeedEff2", "ec_ft_landing_sand_sa02_shake01");
				Player.Effect.PlayEffect("IsStateNowMSpeedEff2", "ec_ft_landing_sand_sa02_shake01");
				Player.Effect.PlayEffect("IsStateNowMSpeedEff3", "ec_ft_landing_sand_sa03_shake01");
				Player.Effect.PlayEffect("IsStateNowMSpeedEff3", "ec_ft_landing_sand_sa03_shake01");
			}
			if(LoopTimeTrigger==2||LoopTimeTrigger==6||LoopTimeTrigger==9)
			{
				Player.Effect.StopEffect("IsStateNowMSpeedEff1");
				Player.Effect.StopEffect("IsStateNowMSpeedEff2");
				Player.Effect.StopEffect("IsStateNowMSpeedEff3");
			}
		}
	}else if((LoopTimeTrigger==6||LoopTimeTrigger==1)&&IsStateSonicNotDead){
		Player.Effect.StopEffect("IsStateNowMSpeedEff1");
		Player.Effect.StopEffect("IsStateNowMSpeedEff2");
		Player.Effect.StopEffect("IsStateNowMSpeedEff3");
	}

















///////////////////////////////////////////////////EX Diving free fall
//Allow simultaneous use air boost
//Press the Y button to Diving
//NEW Custom Diving

//ExDivingAnimation
//0=OFF  1+=ON    -1=End Animation

if(UseExFreeFall){					//EX Diving ON OFF
	
	
	
//Diving Air Boost On Off
	if(!UseExFreeFallAirBoost){
		if(IsStateCustomDiving){
			Player.State.Discard(Sonic.StateID.StateAirBoost);
			Player.State.Discard(Sonic.StateID.StateJump);
			Player.State.Discard(Sonic.StateID.StateBaseJump);
			Player.State.Discard(Sonic.StateID.StateDoubleJump);
			Player.State.Discard(Sonic.StateID.StateGrindDoubleJump);
			Player.State.Discard(Sonic.StateID.StateBounceJump);
			Player.State.Discard(Sonic.StateID.StateBumpJump);
		}
	}
	
	
	//Diving End
	if(IsStateCustomDiving)
	{
		if(Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateFall){
			IsStateCustomDiving=false;
			ExDivingAnimation=0f;
		}
		
		if(Player.Input.IsPressed(Player.InputActionType.PlayerJump)
		//||Player.Input.IsPressed(Player.InputActionType.PlayerCyloop)
		||Player.Input.IsPressed(Player.InputActionType.PlayerAttack)
		||Player.Input.IsPressed(Player.InputActionType.PlayerLightDash)
		||Player.Input.IsPressed(Player.InputActionType.PlayerBoost)
		||Player.Input.IsPressed(Player.InputActionType.PlayerDrift)
		||Player.Input.IsPressed(Player.InputActionType.PlayerChangeSuperSonic)
		||Player.Input.IsPressed(Player.InputActionType.PlayerLeftStep)
		||Player.Input.IsPressed(Player.InputActionType.PlayerRightStep)
		||Player.Input.IsPressed(Player.InputActionType.PlayerStomping)
		||Player.Input.IsPressed(Player.InputActionType.PlayerAction)
		||Player.Input.IsPressed(Player.InputActionType.PlayerActionAlways)
		||Player.Input.IsPressed(Player.InputActionType.PlayerSmash)
		||Player.Input.IsPressed(Player.InputActionType.CameraGaze)
		||Player.Input.IsPressed(Player.InputActionType.PlayerSonicboom)
		){
			if(IsStateCustomDiving){
				IsStateCustomDiving=false;
				ExDivingAnimation=0f;
				Player.Animation.SetAnimation("DIVE_FAST");
			}
		}
	}
	
	if(IsStateCustomDiving){
		SET_WORLD_FLAG(IsAirTrick, false);
		if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateGrindDoubleJump){
			Player.State.SetState(Sonic.StateID.StateFall);
			Player.Animation.SetAnimation("DIVE_FAST");
		}
	}
	
	//Diving Start
	if(!Player.Status.IsGrounded()
	&&Player.Input.IsPressed(Player.InputActionType.PlayerCyloop)
	&&Player.State.GetCurrentStateID<Sonic.StateID>() !=Sonic.StateID.StateQuickCyloop
	&&Player.State.GetCurrentStateID<Sonic.StateID>() !=Sonic.StateID.StateHomingAttack
	&&Player.State.GetCurrentStateID<Sonic.StateID>() !=Sonic.StateID.StateAttackRoot
	&&Player.State.GetCurrentStateID<Sonic.StateID>() !=Sonic.StateID.StateAcceleCombo1
	&&Player.State.GetCurrentStateID<Sonic.StateID>() !=Sonic.StateID.StateAcceleCombo2
	&&Player.State.GetCurrentStateID<Sonic.StateID>() !=Sonic.StateID.StateGuardedFlipBack
	&&IsStateInNormalAir
	&&!IsStateCustomDiving
	&&IsStateSonicNotDead
	&&!IS_STATE_FLAG(IsBoost)
	){
		Player.State.SetState(Sonic.StateID.StateFall);
		IsStateCustomDiving=true;
		ExDivingAnimation=1f;
		Vector3 DivingSpeed=kinematics->Velocity;
		kinematics->Velocity.X*=0.885f;
		kinematics->Velocity.Z*=0.885f;
		if(LastPosition.Y<kinematics->Position.Y){
			kinematics->Velocity.Y=0f;
		}
	}
	
	
	
	//Diving Start Animation
	if(ExDivingAnimation>=1f
	&&IsStateCustomDiving
	&&ExDivingAnimation<20f
	){
		Player.Animation.SetAnimation("DIVE_START");
		ExDivingAnimation+=1f;
	}else{
		ExDivingAnimation=0f;
	}
	
	
	//Diving Forward Speed
	if(IsStateCustomDiving
	){
		if(ExDivingAnimation>=20f)
		{
			Player.Animation.SetAnimation("DIVE");
		}
		
		//if(joystickX+joystickY>0.6f&&horzMag<18f){
		//	kinematics->Velocity+=Player.Kinematics.GetForward() * 0.225f;
		//}
		
	}
	
	
	//Diving Fall Speed
	if(LastPosition.Y>kinematics->Position.Y+0.0885f
	&&IsStateCustomDiving
	){
		kinematics->Velocity+=new Vector3(0f,0.97f,0f);
	}
	
	//Frist Diving Speed Up
	if(IsStateFristDiving
	&&IsStateCustomDiving
	){
		if(horzMag<45f)
		{
			Vector3 DivingSpeed=kinematics->Velocity;
			kinematics->Velocity=new Vector3(DivingSpeed.X*1.25f,3.5f,DivingSpeed.Z*1.25f)
		}
		IsStateFristDiving=false;
	}
	
	
}					//EX Diving ON OFF END
	
	
	
	
	
	
	
	
	
//////////////////////////////////////////////////////////////EX Instantaneous Spin boost

	if(!NowInBattleState
	&&IsStateSonicNotDead
	&&Player.Input.IsPressed(Player.InputActionType.PlayerSonicboom)
	&&Player.Status.IsGrounded()
	&&UseExAirSpinDash
	){
		Player.State.SetState(Sonic.StateID.StateSpinBoost);
	}
	if(IsStateInNormalAir
	&&!NowInBattleState
	&&IsStateSonicNotDead
	&&Player.Input.IsPressed(Player.InputActionType.PlayerSonicboom)
	&&!Player.Status.IsGrounded()
	&&Player.State.GetCurrentStateID<Sonic.StateID>() !=Sonic.StateID.StateGrind
	&&UseExAirSpinDash
	){
		Player.State.SetState(Sonic.StateID.StateStompingDown);
	}
	if(NowInBattleState
	&&IsStateSonicNotDead
	&&Player.Input.IsPressed(Player.InputActionType.PlayerSonicboom)
	&&!Player.Status.IsGrounded()
	&&Player.State.GetCurrentStateID<Sonic.StateID>() !=Sonic.StateID.StateGrind
	&&UseExAirSpinDash
	){
		Player.State.SetState(Sonic.StateID.StateSonicBoomKick);
	}
	
	

	if(IsStateSonicNotDead
	&&IsStateHoldSpin
	&&IsStateInNormalAir
	&&UseExAirSpinDash
	){
		if(Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateStomping
		||Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateStompingBounce
		||Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateStompingDown
		||Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateStompingDown
		){
			Player.Animation.SetAnimation("JUMP_BALL");
		}
	}






//////////////////////////////////////////////////////EX Forward Stomp (Air Spin) LT+RT Spin Boost
	if (IsStateInNormalAir
	&&IsStateSonicNotDead
	&&Player.State.GetCurrentStateID<Sonic.StateID>() !=Sonic.StateID.StateWaterFall
	&&Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStompingDown
	&&IsStateHoldSpin
	&&!IsStateHoldStomp
	&&IsStateHoldBoost
	&&UseExAirSpinDash
	&&!IS_WORLD_FLAG(IsAutoRun)
		){
			NoHomingDashTime=0.0f;
			if(!Player.Status.IsSideView()&&mag<70f)
			{
				kinematics->Velocity+= Player.Kinematics.GetForward()*1.4f+(new Vector3(0.0f, 1.00f, 0.0f));
			}else if(mag<70f){
				kinematics->Velocity+= Player.Kinematics.GetForward()*0.625f+(new Vector3(0.0f, 0.425f, 0.0f));
			}
		}
//EX Force into Stomping
	if (
	IsStateInNormalAir
	&&Player.State.GetCurrentStateID<Sonic.StateID>() !=Sonic.StateID.StateWaterFall
	&&!NowInBattleState
	&&IsStateSonicNotDead
	&&Player.Input.IsPressed(Player.InputActionType.PlayerSonicboom)
	&&!Player.Status.IsGrounded()
	&&Player.State.GetCurrentStateID<Sonic.StateID>() !=Sonic.StateID.StateGrind
	&&UseExAirSpinDash
	&&!IS_WORLD_FLAG(IsAutoRun)
	){
		Player.State.SetState(Sonic.StateID.StateStompingDown);
		NoHomingDashTime=0.0f;
	}
	
	
	
	
	
	
	
////////////////////////////////////////////////////EX Super Bounce Jump
	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateBounceJump
	&&!Player.Input.IsPressed(Player.InputActionType.PlayerBoost)
	&&UseHigherBounceJump
	){
	if(IsStateSonicNotDead && IsStateHoldStomp)
		{
		IsStateHoldStomp=false;
		if(!IsStateAfterBounceJump&&IsStateSonicNotDead)
			{
			kinematics->Velocity +=kinematics->Velocity*0.45f;
			}
		IsStateAfterBounceJump=true;
		}
	}
	
//when Super Bounce Jump input RT X B A  L R button
	if (!Player.Status.IsGrounded() &&Player.Input.IsPressed(Player.InputActionType.PlayerBoost)
	&&Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateBounceJump
	){
		if(IsStateAirBoostOn&&IsStateSonicNotDead)
			{
			Player.State.SetState(Sonic.StateID.StateAirBoost);
			IsStateAirBoostOn= false;
			}
	}
	if (!Player.Status.IsGrounded() &&Player.Input.IsPressed(Player.InputActionType.PlayerAttack)
	&&Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateBounceJump && IsStateSonicNotDead
	){
		Player.State.SetState(Sonic.StateID.StateCloudJump);
		IsStateAfterBounceJump=true;
	}
	if (!Player.Status.IsGrounded() &&Player.Input.IsPressed(Player.InputActionType.PlayerStomping)
	&&Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateBounceJump && IsStateSonicNotDead
	){
		Player.State.SetState(Sonic.StateID.StateAquaBallStomping);
	}
	if (!Player.Status.IsGrounded() &&Player.Input.IsPressed(Player.InputActionType.PlayerLeftStep)
	&&Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateBounceJump && IsStateSonicNotDead
	){
		Player.State.SetState(Sonic.StateID.StateRecoveryJump);
	}
	if (!Player.Status.IsGrounded() &&Player.Input.IsPressed(Player.InputActionType.PlayerRightStep)
		&&Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateBounceJump
		&&IsStateSonicNotDead
	){
		Player.State.SetState(Sonic.StateID.StateRecoveryJump);
	}
	
	
	
////////////////////////////////////////////////////EX SimpleDrift
if(UseExDrift){			//Drift ON OFF

	var DriftStart = (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateRun) 
	|| (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoost)
	|| (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSliding) 
	||(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDropDash
	&&Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDriftAir)
	&&UseExDrift
	&&mag>14f;

//Slide to Drift
	if(Player.Status.IsGrounded() 
		&&Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSliding
		&&IsStateHoldStomp
		&&!Player.Input.IsPressed(Player.InputActionType.PlayerStomping)
		&&!Player.Status.IsSideView()
		&&IsStateHoldBoost
		&&IsStateSonicNotDead
		//&&joystickX*1.5f>joystickY		//joystickX+joystickY=1f
		//&&XInput.GetAnalog(0).Y>-0.5f	//Maybe bug so I canceled it
	){	
		Player.State.SetState(Sonic.StateID.StateDrift);
	}
		
//Drift+A can Jump
	if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDrift
	&&Player.Input.IsPressed(Player.InputActionType.PlayerJump)
	){
	
		Player.State.SetState(Sonic.StateID.StateJump);
	}
	
	
	
//EX Drift Star Effect
		if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDrift
		&&Player.Status.IsGrounded()
		&&IsStateSonicNotDead
		&&!DisableAllExEffect
		){
			if(LoopTimeTrigger==0||LoopTimeTrigger==5)
			{
				Player.Effect.StopEffect("DriftSmoke1");
				Player.Effect.PlayEffect("DriftSmoke1", "ec_ft_drift_sa03_smoke01");
			}else if(LoopTimeTrigger==4||LoopTimeTrigger==9){
				Player.Effect.StopEffect("DriftSmoke1");
				Player.Effect.PlayEffect("DriftSmoke1", "ec_ft_drift_sa03_smoke01");
			}
		}else if(
			IsStateSonicNotDead
			&&!DisableAllExEffect
		){
			Player.Effect.StopEffect("DriftSmoke1");
		}

//Air Drift Animation
		if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDriftAir
		||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDrift
		){	
			if(!Player.Status.IsGrounded())
			{
			Player.Animation.SetAnimation("BUMP_JUMP_LOOP");
			//Player.Animation.SetAnimation("BOARDING_FALL");
			}else{
			Player.Animation.SetAnimation("DRIFT");
			//Player.Animation.SetAnimation("BOARDING");
			}
		}
		
//When Drift End
		if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDrift
		||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDriftAir
		){
			if(Player.Status.IsGrounded()&&!IsStateHoldStomp&&IsStateSonicNotDead)
			{
				//Player.State.SetState(Sonic.StateID.StateRun);
				Player.State.SetState(Sonic.StateID.StateDriftDash);
				if(!SonicNowStop){Player.Sound.PlaySound("sn_airtrick");}
				//Player.Sound.PlaySound("sn_brake");
			}else if(!Player.Status.IsGrounded()
			&&!IsStateHoldStomp
			&&IsStateSonicNotDead
			){
				Player.State.SetState(Sonic.StateID.StateCloudJump);
			}
		}
		
		
//Edit Drift Dash
	
	if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDriftDash)
	{
		if(mag<70)
		{
			kinematics->Velocity +=Player.Kinematics.GetForward() * 2.45f;
		}
	}
	
//Edit Drift Dash effect
		
		
	if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDriftDash
	&&IsStateSonicNotDead
	&&!DisableAllExEffect
		){
		if(LoopTimeTrigger% 2 != 0)
		{
			Player.Effect.PlayEffect("DriftDashEffect1", "ec_so_skill_spinslash_ball01_gpu01");
			Player.Effect.PlayEffect("DriftDashEffect2", "ss_dash_smoke02_mesh01");
			Player.Effect.PlayEffect("DriftDashEffect2", "ss_dash_smoke02_mesh01");
			Player.Effect.PlayEffect("DriftDashEffect2", "ss_dash_smoke02_mesh01");
			Player.Effect.PlayEffect("DriftDashEffect3", "ec_ft_dash_ge01_line_random_sub01");
		}else if(IsStateSonicNotDead){
		Player.Effect.StopEffect("DriftDashEffect1");
		Player.Effect.StopEffect("DriftDashEffect2");
		Player.Effect.StopEffect("DriftDashEffect2");
		Player.Effect.StopEffect("DriftDashEffect2");
		Player.Effect.StopEffect("DriftDashEffect3");
		}
	}else if(
		IsStateSonicNotDead
		&&!DisableAllExEffect
	){
		Player.Effect.StopEffect("DriftDashEffect1");
		Player.Effect.StopEffect("DriftDashEffect2");
		Player.Effect.StopEffect("DriftDashEffect3");
	}
		
//Drift in Air Force End( olny cyberspace )

	if (IS_WORLD_FLAG(IsCyberSpace)
	&&IsStateSonicNotDead
	&&!Player.Status.IsGrounded())
	{
		if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDrift&&IsStateSonicNotDead
		||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDriftAir
		||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDriftDash
		){
			Player.State.SetState(Sonic.StateID.StateFall);
		}
	}
	
	
}	//Drift ON OFF
	
	
	
	
	
	
	
	
	
///////////////////////////////////////////////EX Bump Jump
/////////now it need UseExFreeBumpJump
	
	if(UseExFreeBumpJump)
	{
		if (IsStateSonicNotDead
		&&Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDoubleJump 
		&&IsStateHoldBoost 
		&&!Player.Status.IsGrounded() 
		&&!IsStateCustomDiving
			){
				Player.State.SetState(Sonic.StateID.StateBumpJump);
				if(mag<45f&&UseFastFreeBumpJump){
					kinematics->Velocity +=kinematics->Velocity*0.3f;
				}
			}
		if (IsStateSonicNotDead
		&&Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateGrindDoubleJump 
		&&IsStateHoldBoost 
		&&!Player.Status.IsGrounded() 
		&&!IsStateCustomDiving
		){
				Player.State.SetState(Sonic.StateID.StateBumpJump);
				Player.Sound.PlaySound("sn_windmill_kick");
				if(mag<45f&&UseFastFreeBumpJump){
					kinematics->Velocity +=kinematics->Velocity*0.3f;
				}
			}
		if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateAirBoost 
		&&!Player.Status.IsGrounded() 
		&&Player.Input.IsPressed(Player.InputActionType.PlayerJump))
			{
				if(IsStateSonicNotDead 
				&&!IsStateAfterBounceJump)
				{
					Player.State.SetState(Sonic.StateID.StateBounceJump);
					if(mag<45f&&UseFastFreeBumpJump){
						kinematics->Velocity +=Player.Kinematics.GetForward()*2.0f;
						kinematics->Velocity +=kinematics->Velocity*0.15f;
					}
					IsStateAfterBounceJump=true;
				}
			}
		if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateJumpBoardLaunch 
		&& !Player.Status.IsGrounded() 
		&& Player.Input.IsPressed(Player.InputActionType.PlayerJump) 
		&& IsStateSonicNotDead
		&&!IsStateCustomDiving
			){
				Player.State.SetState(Sonic.StateID.StateBumpJump);
			}
		if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateBumpJump 
		&& Player.Input.IsPressed(Player.InputActionType.PlayerAttack))
			{
				if(IsStateSonicNotDead&&Player.State.GetCurrentStateID<Sonic.StateID>() !=Sonic.StateID.StateHomingAttack)
				{
					Player.State.SetState(Sonic.StateID.StateRecoveryJump);
					if(mag<45f&&UseFastFreeBumpJump){
						kinematics->Velocity +=kinematics->Velocity*0.2f;
					}
				}
			}
	//Bump + Double Jump
		if(IsStateSonicNotDead
		&&Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateBumpJump 
		&&Player.Input.IsPressed(Player.InputActionType.PlayerJump)
		&&!Player.Status.IsGrounded()
		){
			Player.State.SetState(Sonic.StateID.StateRecoveryJump);
			kinematics->Velocity +=kinematics->Velocity*1.6f;
		}
		
		//Bump + trick in cyberspace
		if(IS_WORLD_FLAG(IsCyberSpace)
		&&Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateBumpJump)
		{
			SET_WORLD_FLAG(IsAirTrick, true);
		}
	
///////////////////////////////////////////////Bump Air Boost Fix
	if (IsStateSonicNotDead
	&&Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateBumpJump 
	&&Player.Input.IsPressed(Player.InputActionType.PlayerBoost)
	&&!Player.Status.IsGrounded()
	&&UseExFreeBumpJump
		){
			if(IsStateAirBoostOn)
			{
			Player.State.SetState(Sonic.StateID.StateAirBoost);
			IsStateAirBoostOn=false;
			}else{
			Player.State.SetState(Sonic.StateID.StateRecoveryJump);
			kinematics->Velocity +=Player.Kinematics.GetForward() * (12.0f);
			}
		}
	
	
	
	
	}  //EX Bump END
	
	
	
	
	
	

////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////SU Stomp Curve////////////////////////////////////////
////////////////////////////////////////Start///////////////////////////////////////////////
//////////////////SU Stomp Forced to StateSliding
if(UseStompCurve){         //SU Stomp Curve Start
	
	//When airBoost Stomping force to Sliding
	if(IsStateHoldBoost
	&&Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateStompingLand
	&&IsStateSonicNotDead
	){
		Player.State.SetState(Sonic.StateID.StateSliding);
		kinematics->Velocity *=5.5f;
	}
	
	
	if(
	SonicNowStomp
	&&Player.Status.IsGrounded()
	&&IsStateSonicNotDead
	){
		float SlidingSpeedX=StompVelocity.X;
		float SlidingSpeedZ=StompVelocity.Z;
		if(SlidingSpeedX<0f)
		{SlidingSpeedX*=-1f}
		if(SlidingSpeedZ<0f)
		{SlidingSpeedZ*=-1f}
		if(SlidingSpeedX+SlidingSpeedZ>=0.45f)//////////////////////////////////Set Force Sliding XZ Speed Slide
		{
			Player.State.SetState(Sonic.StateID.StateSliding);
			kinematics->Velocity +=SlidingVelocity*1.5f;
			SlidingVelocity*=0.9f;
		}
		StompVelocity=new Vector3(0f,0f,0f);
		SonicNowStomp=false;
	}
	
///////////////SU Stomp down Curve
	if(Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateStompingDown
	&&IsStateSonicNotDead
	){
		SonicNowStomp=true;
	}else{
		SonicNowStomp=false;
		//Set Stomp Forward speed
		if(!IsStateHoldSpin)
		{
			StompVelocity=horzMag*Player.Kinematics.GetForward();
		}
	}
	
	if(Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateStompingDown
	&&IsStateSonicNotDead
	){
		kinematics->Velocity +=StompVelocity;
		if(!IsStateHoldSpin)
		{
			StompVelocity=StompVelocity*0.45f;//////////////Set Stomp Curve Attenuation force
		}
		if(IsStateHoldSpin)
		{
			StompVelocity*=0f;
		}
		if(mag>60f)////////////////////////////////////////Set Stomp Max Speed .SU Speed=15~18
		{
			kinematics->Velocity *=0.85f;////////////////Set Stomp Speed Attenuation force
		}
	}
	
////////////////////////////SlidingToJumpReady
	
	if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSliding
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStompingLand
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDrift
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDriftDash
	){
		SlidingToJumpReady=1;
	}
	
	if(SlidingToJumpReady==1
	&&Player.Input.IsPressed(Player.InputActionType.PlayerJump)
	&&IsStateHoldBoost
	&&IsStateSonicNotDead
	){
		Player.State.SetState(Sonic.StateID.StateAirBoost);
		if(!IS_WORLD_FLAG(IsCyberSpace)
		&&!Player.Status.IsSideView()
		){
			kinematics->Velocity +=new Vector3(0f,10f,0f);
		}
		if(IsStateNowMSpeed)
		{
			kinematics->Velocity +=new Vector3(0f,8f,0f);
		}
		SlidingToJumpReady=2;
	}
	
	
	if((SlidingToJumpReady==2||SlidingToJumpReady==3)
	&&Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateAirBoost
	&&LastPosition.Y<kinematics->Position.Y
	&&IsStateSonicNotDead
	){
		//Player.Animation.SetAnimation("SELECTJUMP_U_LOOP");
			if(SlidingToJumpReady==2)
			{
			Player.Animation.SetAnimation("JUMP_BALL");
			SlidingToJumpReady=3;
			}
		if(horzMag<55f)
		{
			kinematics->Velocity +=Player.Kinematics.GetForward() *2.5f;
		}
		if(IsStateNowMSpeed&&horzMag<68f)
		{
			kinematics->Velocity +=new Vector3(kinematics->Velocity.X*0.12f,0f,kinematics->Velocity.Z*0.12f);
		}
	}
	
	if(SlidingToJumpReady==3
	&&Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateAirBoost
	&&LastPosition.Y>=kinematics->Position.Y
	&&IsStateSonicNotDead
	){
		if(mag<35f&&!IsStateNowMSpeed)
		{
			kinematics->Velocity +=Player.Kinematics.GetForward() *1.5f;
		}
		
		if(horzMag<55f&&IsStateNowMSpeed)
		{
			kinematics->Velocity +=Player.Kinematics.GetForward() *2.5f;
		}
		SlidingToJumpReady=3;
		
		if(IsStateNowMSpeed&&horzMag<68f)
		{
			kinematics->Velocity +=new Vector3(kinematics->Velocity.X*0.12f,0f,kinematics->Velocity.Z*0.12f);
		}
	}
	
	
	if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateGrindJump
	&&Player.Input.IsPressed(Player.InputActionType.PlayerJump)
	&&IsStateHoldBoost
	&&IsStateHoldStomp
	&&IsStateSonicNotDead
	){
		Player.State.SetState(Sonic.StateID.StateAirBoost);
		if(IsStateNowMSpeed)
		{
			kinematics->Velocity +=new Vector3(0f,5.5f,0f);
		}
		SlidingToJumpReady=2;
	}
	
	
}         //SU Stomp Curve End



//////////////////////////////////SU Stomp Curve////////////////////////////////////////
////////////////////////////////////////End////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////Sliding+Boost
if(UseStompCurve||UseExQSS){		//ON OFF


	if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSliding
	&IsStateHoldBoost
	&&IsStateSonicNotDead
	&&Player.Status.IsGrounded()
	){
		if(mag<60f)
		{
			kinematics->Velocity +=Player.Kinematics.GetForward()*10f;
		}
	}
	
	
}		//ON OFF
////////////////////////////////////////////////////////////////////////////////////


//////////////SU Sweepkick anime

if(UseExSweepKick){			//UseSweepkick ON OFF Start
	
	if(NowSweepKick1
	&&SweepKickAnmTime<52f
	&&Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateSliding
	&&Player.Input.IsPressed(Player.InputActionType.PlayerStomping)
	&&IsStateSonicNotDead
	){
		NowSweepKick2=true;
		DoubleSquatReady=0f;
	}
	
	if(NowSweepKick2
	&&SweepKickAnmTime<52f
	&&Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateSliding
	&&IsStateSonicNotDead
	){
		SweepKickAnmTime+=1f;
	}
	
	
	if(NowSweepKick2
	&&Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateSliding
	&&SweepKickAnmTime>1f
	&&SweepKickAnmTime<14f
	&&IsStateSonicNotDead
	){
		Player.Animation.SetAnimation("COMBO_CHARGE_LOOP");
	}
	
	if(NowSweepKick2
	&&SweepKickAnmTime==1f
	&&IsStateSonicNotDead
	){
		if(!SonicNowStop){
			Player.Sound.PlaySound("sn_drop_kick");
			Player.Sound.PlaySound("sn_drop_kick");
			Player.Sound.PlaySound("sn_drop_kick");
		}
		Player.Effect.PlayEffect("SweepKick2", "ec_so_pow_boost_impact_fv01_burst01");
		Player.Effect.PlayEffect("SweepKick3", "ec_ft_pow_dash_ge01_blue_line01");
		Player.Effect.PlayEffect("SweepKick4", "ec_ft_pow_dash_ge01_round_blue01");
		if(!DisableAllExEffect)
		{
		Player.Effect.PlayEffect("SweepKick2", "ec_so_pow_boost_impact_fv01_burst01");
		Player.Effect.PlayEffect("SweepKick4", "ec_ft_pow_dash_ge01_round_blue01");
		Player.Effect.PlayEffect("SweepKick4", "ec_ft_pow_dash_ge01_round_blue01");
		}
		kinematics->Velocity *=1.5f;
	}
	
	
	if(NowSweepKick2
	&&SweepKickAnmTime==18f
	&&IsStateSonicNotDead
	){
		Player.Effect.StopEffect("SweepKick2");
		Player.Effect.StopEffect("SweepKick2");
		Player.Effect.StopEffect("SweepKick3");
		Player.Effect.StopEffect("SweepKick4");
		Player.Effect.StopEffect("SweepKick4");
		Player.Effect.StopEffect("SweepKick4");
		//if(!SonicNowStop){Player.Sound.PlaySound("sn_riderkick_finish");}
		//if(!SonicNowStop){Player.Sound.PlaySound("sn_multi_airial");}
		if(!SonicNowStop){
		Player.Sound.PlaySound("sn_parry_move");
		Player.Sound.PlaySound("sn_skateboard_jump");
		Player.Sound.PlaySound("sn_skateboard_trick");
		Player.Sound.PlaySound("sn_quick_turn");
		}
	}
	
	if(NowSweepKick2
	&&SweepKickAnmTime==22f
	&&IsStateSonicNotDead
	){
		Player.Effect.PlayEffect("SweepKick1", "ef_so_cyloop_slash_hit01");
		Player.Effect.PlayEffect("SweepKick2", "ec_so_pow_boost_impact_fv01_burst01");
		Player.Effect.PlayEffect("SweepKick5", "ef_so_skill_chargeatk01");
		if(!DisableAllExEffect)
		{
			Player.Effect.PlayEffect("SweepKick2", "ec_so_pow_boost_impact_fv01_burst01");
			Player.Effect.PlayEffect("SweepKick5", "ef_so_skill_chargeatk01");
		}
	}
	
	if(NowSweepKick2
	&&SweepKickAnmTime==30f
	&&IsStateSonicNotDead
	&&!DisableAllExEffect
	){
	Player.Effect.PlayEffect("SweepKick6", "ef_so_stomp_end01_third");
	}
	
	if(NowSweepKick2
	&&SweepKickAnmTime==35f
	&&IsStateSonicNotDead
	){
	Player.Effect.StopEffect("SweepKick1");
	Player.Effect.StopEffect("SweepKick2");
	Player.Effect.StopEffect("SweepKick2");
	kinematics->Velocity *=0.6f;
	}
	
	if(NowSweepKick2
	&&Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateSliding
	&&IsStateSonicNotDead
	){
		NowSweepKick2=true;
	}
	
	if(NowSweepKick2
	&&Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateSliding
	&&SweepKickAnmTime>=14f
	&&SweepKickAnmTime<=52f
	&&IsStateSonicNotDead
	){
		Player.Animation.SetAnimation("BOX_KICK_BOOST_L");
	}
	
	if(NowSweepKick2
	&&SweepKickAnmTime==52f
	&&Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateSliding
	&&IsStateSonicNotDead
	){
		Player.State.SetState(Sonic.StateID.StateFall);
		SweepKickAnmTime=0f;
		NowSweepKick1=false;
		NowSweepKick2=false;
		Player.Effect.StopEffect("SweepKick5");
		Player.Effect.StopEffect("SweepKick5");
		Player.Effect.StopEffect("SweepKick6");
		DoubleSquatReady=0;
	}
	
	if(!NowSweepKick1
	&&Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateSliding
	&&Player.Input.IsPressed(Player.InputActionType.PlayerStomping)
	&&IsStateSonicNotDead
	){NowSweepKick1=true;}
	
	if(Player.State.GetCurrentStateID<Sonic.StateID>() !=Sonic.StateID.StateSliding
	&&IsStateSonicNotDead
	){
		NowSweepKick1=false;
		SweepKickAnmTime=0f;
		NowSweepKick1=false;
		NowSweepKick2=false;
		if(LoopTimeTrigger==2||LoopTimeTrigger==6)
		{
		Player.Effect.StopEffect("SweepKick1");
		Player.Effect.StopEffect("SweepKick2");
		Player.Effect.StopEffect("SweepKick3");
		}
		if(LoopTimeTrigger==3||LoopTimeTrigger==8)
		{
		Player.Effect.StopEffect("SweepKick4");
		Player.Effect.StopEffect("SweepKick5");
		Player.Effect.StopEffect("SweepKick6");
		}
	}
	
	
	
////////////////////////////////////////////////////Double Squat
	if(DoubleSquatReady>=1
	&&Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateSquat
	&&Player.Input.IsPressed(Player.InputActionType.PlayerStomping)
	&&IsStateSonicNotDead
	){
		Player.State.SetState(Sonic.StateID.StateSliding);
		kinematics->Velocity *=Player.Kinematics.GetForward()*5f;
		DoubleSquatReady=-1f;
		NowSweepKick1=true;
		NowSweepKick2=true;
	}




//DoubleSquatReady -1=On 0=off  1-20=StartTime
	if(DoubleSquatReady==0f
		&&Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateSquat
		&&IsStateSonicNotDead
	){
		DoubleSquatReady=1f;
	}else if(DoubleSquatReady>=1f
		&&DoubleSquatReady<20f
		&&IsStateSonicNotDead
	){
		DoubleSquatReady+=1f;
	}
	if((!Player.Status.IsGrounded()
	||DoubleSquatReady==20f)
	&&IsStateSonicNotDead
	){
		DoubleSquatReady=0f;
	}
	
	
	if(DoubleSquatReady==-1f
	&&!Player.Status.IsGrounded()
	&&IsStateSonicNotDead
	){
		DoubleSquatReady=0;
	}else if(DoubleSquatReady==-1f
	&&IsStateSonicNotDead)
	{
		kinematics->Velocity *=0.5f;
	}
	
	
}		//UseSweepkick ON OFF Start
	
////////////////////////////////////////////// Sliding Effect slide effect
	
	if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSliding
		&&SweepKickAnmTime==0f
		&&IsStateSonicNotDead
		&&!DisableAllExEffect
		&&UseExSlideEffect
		){
		if(LoopTimeTrigger==0
			&&mag>20f
			&&IsStateSonicNotDead
			){
				Player.Effect.StopEffect("SlidingEff1");
				Player.Effect.PlayEffect("SlidingEff1", "ec_so_skill_sonicboom01_slashaura01");
			}else if((LoopTimeTrigger==3||LoopTimeTrigger==7)&&IsStateSonicNotDead){
				Player.Effect.StopEffect("SlidingEff1");
		}
	}else if(
		IsStateSonicNotDead
		&&LoopTimeTrigger==5
		&&!DisableAllExEffect
		&&UseExSlideEffect
	){
		Player.Effect.StopEffect("SlidingEff1");
	}



//////////////////////////////////////////////////Fake QSS

if(UseExQSS){			//UseExQSS ON OFF

	//Slide to L R Step
	if(
	(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSliding
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStompingLand
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDrift
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDriftDash)
	&&Player.Input.IsPressed(Player.InputActionType.PlayerLeftStep)
	&&Player.Status.IsGrounded()
	&&IsStateSonicNotDead
	){
		Player.State.SetState(Sonic.StateID.StateLeftStepRun);
	}
	//Slide to L R Step
	if(
	(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSliding
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStompingLand
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDrift
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDriftDash)
	&&Player.Input.IsPressed(Player.InputActionType.PlayerRightStep)
	&&Player.Status.IsGrounded()
	&&IsStateSonicNotDead
	){
		Player.State.SetState(Sonic.StateID.StateRightStepRun);
	}
	
	
	
	//LB+RB
	if(IsStateHoldRB
	&&IsStateHoldStomp
	&&IsStateHoldLB
	&&IsStateSonicNotDead
	&&Player.Status.IsGrounded()
	){
		Player.State.SetState(Sonic.StateID.StateSliding);
	}
	
	//Avoid Air Fix
	if(
		(
			Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateAvoid
			||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateAvoidLocal
			||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateAvoidToTarget
			||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateAvoidUpper
			||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateQuickStep
			||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateQuickStepRoot
			||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateQuickStepCrash
			||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateQuickStepJump
			||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateQuickStepDoubleJump
			||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateQuickStepLeft
			||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateQuickStepRight
		)
		&&IsStateSonicNotDead
		&&IsStateHoldStomp
	){
		if(!Player.Status.IsGrounded())
		{
			Player.State.SetState(Sonic.StateID.StateWallLeave);
		}else{
			Player.State.SetState(Sonic.StateID.StateRun);
		}
	}
	
	//LB+RB Air Fix
	if(IsStateHoldRB
	&&IsStateHoldStomp
	&&IsStateHoldLB
	&&IsStateSonicNotDead
	&&!Player.Status.IsGrounded()
	){
		Player.State.SetState(Sonic.StateID.StateWallLeave);
	}
	
	
	
	//QSS Sound
	if(IsStateHoldStomp&&
	IsStateSonicNotDead&&
	(Player.Input.IsPressed(Player.InputActionType.PlayerRightStep)
	||Player.Input.IsPressed(Player.InputActionType.PlayerLeftStep))
	&&(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateLeftStepRun
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateRightStepRun
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSliding)
	){
		if(!SonicNowStop)
		{
			Player.Sound.PlaySound("sn_stomping_roll");
			Player.Sound.PlaySound("sn_relative_wind");
			Player.Sound.PlaySound("sn_sliding");
			Player.Sound.PlaySound("sn_sliding");
			Player.Sound.PlaySound("sn_run_dirt");
			Player.Sound.PlaySound("sn_skateboard_jump");
			Player.Sound.PlaySound("sn_skateboard_jump");
			//Player.Sound.PlaySound("sn_short_homing");
		}
	}
	
	
	//QSS Speed Up
	if(
	Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateRun
	&&IsStateHoldStomp
	&&IsStateSonicNotDead
	){
		Player.State.SetState(Sonic.StateID.StateSliding);
		if(mag<88f&&!IsStateHoldRB&&!IsStateHoldLB)
		{
			kinematics->Velocity*=1.45f;
		}
	}

	
/////QSS +slide effect

	if((Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateRightStepRun
		||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateLeftStepRun)
		&&IsStateHoldStomp
		&&IsStateSonicNotDead
		&&!DisableAllExEffect
		&&UseExSlideEffect
	){
		if(LoopTimeTrigger==0
		&&mag>40f
		&&IsStateSonicNotDead
		){
			Player.Effect.StopEffect("QSSSlidingEff1");
			Player.Effect.PlayEffect("QSSSlidingEff1", "ec_so_skill_sonicboom01_slashaura01");
		}else if(
			(LoopTimeTrigger==3
			||LoopTimeTrigger==7)
			&&IsStateSonicNotDead
		){
			Player.Effect.StopEffect("QSSSlidingEff1");
		}
	}else if(
		IsStateSonicNotDead
		&&LoopTimeTrigger==9
		&&!DisableAllExEffect
		&&UseExSlideEffect
	){
		Player.Effect.StopEffect("QSSSlidingEff1");
	}
	
///////effect part2
	
	if((Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateRightStepRun
		||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateLeftStepRun)
		&&IsStateHoldStomp
		&&IsStateSonicNotDead
		&&!DisableAllExEffect
	){
		if(LoopTimeTrigger==0&&IsStateSonicNotDead)
			{
			Player.Effect.StopEffect("QSSSlidingEff2");
			Player.Effect.StopEffect("QSSSlidingEff2");
			Player.Effect.PlayEffect("QSSSlidingEff2", "ec_so_ringmax_impact01_radial01");
			Player.Effect.PlayEffect("QSSSlidingEff2", "ec_so_ringmax_impact01_radial01");
			}
		}else if(
		IsStateSonicNotDead
		&&LoopTimeTrigger==2
		&&!DisableAllExEffect
		){
			Player.Effect.StopEffect("QSSSlidingEff2");
		}

		
		
//////////Slide to Air end

	if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSliding
	&&!Player.Status.IsGrounded()
	&&IsStateSonicNotDead
	){
		Player.State.SetState(Sonic.StateID.StateCloudJump);
	}
	
	
		
}				//UseExQSS ON OFF (END)
//////////////////////////////////QSS End/////////////////////////////////////////

//Fix Update3 QSS Step Run
	if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateRightStepRun)
	{
		Player.Animation.SetAnimation("QUICKSTEP_RIGHT");
	}
	
	if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateLeftStepRun)
	{
		Player.Animation.SetAnimation("QUICKSTEP_LEFT");
	}

//////////////////////////////////////////////Double Jump Effect
	
	if((Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDoubleJump
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateGrindDoubleJump)
	&&UseHigherDoubleJump
	&&IsStateSonicNotDead
	&&!DisableAllExEffect
	){
		if(
		LoopTimeTrigger==0
		&&LastPosition.Y<kinematics->Position.Y
		)
			{Player.Effect.StopEffect("JumpEff1");
			Player.Effect.PlayEffect("JumpEff1", "ef_so_skill_chargeatk01");
			}else if(LoopTimeTrigger==7||LoopTimeTrigger==8){
			Player.Effect.StopEffect("JumpEff1");
			}
	}else if(
		IsStateSonicNotDead
		&&LoopTimeTrigger==6
		&&!DisableAllExEffect
	){
		Player.Effect.StopEffect("JumpEff1");
	}
	
	
	
///////////////////////////////////////////////Easy EX Homing Boost
	if (IsStateHoldJump
	&&IsStateHoldBoost 
	&&!Player.Status.IsGrounded() 
	&&Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateHomingAttack 
	&&IsStateSonicNotDead
	&&UseExHomingBoost
	){
		Player.State.SetState(Sonic.StateID.StateAirBoost);
		//Player.Animation.SetAnimation("SELECTJUMP_F_LOOP");
	}
		
		
		
		
		
		
		
		
		
		
/////////////////////////////////////////////////////EX Higher Double Jump

	//if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDoubleJump
	//){
	//Player.Animation.SetAnimation("SELECTJUMP_U_LOOP");
	//}
	
	if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateJump
	){
	Player.Animation.SetAnimation("JUMP_BALL");
	}
	
	if (!IsStateHoldBoost&&!Player.Status.IsGrounded() 
	&& Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDoubleJump
	&&UseHigherDoubleJump
	&&IsStateSonicNotDead
		){
			if(!IsStateAfterBounceJump&& IsStateSonicNotDead)
			{
				kinematics->Velocity +=new Vector3(0.0f,3.5f,0.0f);
				IsStateAfterBounceJump=true;
				if(!DisableAllExEffect)
				{
					Player.Effect.PlayEffect("HigherDoubleJump1", "ec_so_pow_boost_impact_fv01_burst01");
					Player.Effect.PlayEffect("HigherDoubleJump1", "ec_so_pow_boost_impact_fv01_burst01");
					Player.Effect.PlayEffect("HigherDoubleJump2", "ec_pl_hit_accelerator01_gpu01");
					Player.Effect.StopEffect("HigherDoubleJump1");
					Player.Effect.StopEffect("HigherDoubleJump1");
					Player.Effect.StopEffect("HigherDoubleJump2");
				}
			}
		}
		if (!IsStateHoldBoost&&!Player.Status.IsGrounded() 
		&& Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateGrindDoubleJump
		&&IsStateSonicNotDead
		){
			if(!IsStateAfterBounceJump && IsStateSonicNotDead)
			{
				//Player.State.SetState(Sonic.StateID.StateBounceJump);
				kinematics->Velocity +=new Vector3(0.0f,3.5f,0.0f);
				IsStateAfterBounceJump=true;
				if(!DisableAllExEffect)
				{
					Player.Effect.PlayEffect("HigherDoubleJump1", "ec_so_pow_boost_impact_fv01_burst01");
					Player.Effect.PlayEffect("HigherDoubleJump1", "ec_so_pow_boost_impact_fv01_burst01");
					Player.Effect.PlayEffect("HigherDoubleJump2", "ec_pl_hit_accelerator01_gpu01");
					Player.Effect.StopEffect("HigherDoubleJump1");
					Player.Effect.StopEffect("HigherDoubleJump1");
					Player.Effect.StopEffect("HigherDoubleJump2");
				}
			}
		}
		
		
		if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateBumpJump
		&&Player.Input.IsPressed(Player.InputActionType.PlayerJump)
		&&IsStateSonicNotDead
		&&!DisableAllExEffect
		){
			Player.Effect.PlayEffect("HigherDoubleJump1", "ef_so_skill_chargeatk01");
			Player.Effect.PlayEffect("HigherDoubleJump1", "ef_so_skill_chargeatk01");
			Player.Effect.PlayEffect("HigherDoubleJump1", "ef_so_skill_chargeatk01");
		}
		
		if(Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateBumpJump
		&&IsStateSonicNotDead&&LoopTimeTrigger==4
		&&!DisableAllExEffect
		){
		Player.Effect.StopEffect("HigherDoubleJump1");
		}
	
	
	
	
	
	
	
	
	
	
	
	
	
///////////////////////////////////////////////StateGrind+Y deceleration Reverse
	if(Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateGrind
	&&Player.Input.IsPressed(Player.InputActionType.PlayerCyloop)
	&&IsStateSonicNotDead
	&&UseExGrindActionY
	){
		if(!DisableAllExEffect)
		{
			Player.Effect.PlayEffect("GrindReB1", "ef_ft_brake_neutral01_boost_fw03");
			Player.Effect.PlayEffect("GrindReB2", "ef_ft_brake_neutral01_boost_ge01");
			Player.Effect.PlayEffect("GrindReB3", "ef_ft_brake_neutral01_boost_md02");
		}
		if(!SonicNowStop){Player.Sound.PlaySound("sn_sonic_boom");}
		kinematics->Rotation =kinematics->Rotation*new Quaternion(-1f,0f,0f,0f);
		kinematics->Velocity = new Vector3(0.0f,0.0f,0.0f);
		Player.State.SetState(Sonic.StateID.StateFall);
	}
	
	/*
	if(Player.State.GetCurrentStateID<Sonic.StateID>() !=Sonic.StateID.StateGrind
	&&IsStateSonicNotDead
	&&LoopTimeTrigger==8
	&&!DisableAllExEffect
	){
		Player.Effect.StopEffect("GrindReB1");
	}
	*/
	
	
	
	
	
	
	
///////////////////////////////////////////////EX StateGrind+LT Spin
	
	if(Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateGrind
	&&IsStateHoldSpin
	&&IsStateSonicNotDead
	&&mag < 60f
	&&UseExGrindActionLT
	){
		kinematics->Velocity +=Player.Kinematics.GetForward() * 15.5f;
	}
	
	if(Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateGrind
	&&Player.Input.IsPressed(Player.InputActionType.PlayerSonicboom)
	&&IsStateSonicNotDead
	&&UseExGrindActionLT
	){
		Player.Animation.SetAnimation("JUMP_BALL");
		if(!SonicNowStop){Player.Sound.PlaySound("sn_spindash");}
		if(!DisableAllExEffect)
		{
		Player.Effect.PlayEffect("GrindSpinLT1", "ef_so_skill_accelerator_aura01");
		Player.Effect.PlayEffect("GrindSpinLT2", "ef_so_skill_airtrick_pose01");
		}
	}
	
	
	if((Player.State.GetCurrentStateID<Sonic.StateID>() !=Sonic.StateID.StateGrind
	||!IsStateHoldSpin)
	&&IsStateSonicNotDead
	&&UseExGrindActionLT
	){
		if(LoopTimeTrigger==7&&!DisableAllExEffect)
		{
		Player.Effect.StopEffect("GrindSpinLT1");
		Player.Effect.StopEffect("GrindSpinLT2");
		}
		if(Player.State.GetCurrentStateID<Sonic.StateID>() !=Sonic.StateID.StateDropDash)
		{
			int soundSpinLT = Player.Sound.PlaySound("sn_spindash");
			Player.Sound.StopSound(&soundSpinLT);
		}
	}
	
	
	
///////////////////////////////////////////////StateGrind+X Speed Up Lite Grind accelerate
	if(Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateGrind
	&&Player.Input.IsPressed(Player.InputActionType.PlayerAttack)
	&&IsStateSonicNotDead
	&&UseExGrindActionX
	){
		if(!SonicNowStop){Player.Sound.PlaySound("sn_windmill_kick");}
		Player.Effect.PlayEffect("GrindSpinX1", "ec_so_pow_boost_impact_fv01_burst01");
		Player.Effect.PlayEffect("GrindSpinX2", "ec_so_pow_boost_impact_fv01_distortion01");
		if(mag < 78f)
		{
		kinematics->Velocity +=Player.Kinematics.GetForward() * 24.5f;
		}
	}
	
	if((Player.State.GetCurrentStateID<Sonic.StateID>() !=Sonic.StateID.StateGrind
		||Player.Input.IsReleased(Player.InputActionType.PlayerAttack))
		&&IsStateSonicNotDead
		&&LoopTimeTrigger==9
		&&UseExGrindActionX
	){
		Player.Effect.StopEffect("GrindSpinX1");
		Player.Effect.StopEffect("GrindSpinX2");
	}
	
	
///////////////////////////////////////////////StateGrind End +B
//GrindAnmTime 0=OFF 1+=ON

if(UseExGrindEndJump){
	
	//Jump
	if(GrindAnmTime>0f
	&&Player.State.GetPreviousStateID<Sonic.StateID>() ==Sonic.StateID.StateGrind
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateSpringJump
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateJumpBoardLaunch
	&&!IS_STATE_FLAG(IsSpringJump)
	&&!Player.Status.IsSpecialAction()
	){
		
		if(!Player.Input.IsDown(Player.InputActionType.PlayerJump)
		){
			kinematics->Velocity *=1.8f;
			kinematics->Velocity +=new Vector3(0.0f, 35.0f, 0.0f);
			Player.Sound.PlaySound("sn_ss_spl_atk_1");
		}else{
			kinematics->Velocity +=new Vector3(0.0f, 15.5f, 0.0f);
			Player.Sound.PlaySound("sn_skateboard_trick");
			Player.Sound.PlaySound("sn_triangle_jump");
			Player.Sound.PlaySound("sn_skateboard_jump");
		}
		
		Player.State.SetState(Sonic.StateID.StateGrindJump);
		if(IsStateHoldBoost){
			kinematics->Velocity +=new Vector3(0.0f, 5.5f, 0.0f);
		}
		if(!SonicNowStop){

		
		Player.Effect.PlayEffect("GrindEndJump1", "ef_so_stomp_end01_third");
		Player.Effect.PlayEffect("GrindEndJump2", "ec_so_pow_boost_impact_fv01_gpu01");
		}
		
		
		
		
		
	}
	

	
	
	//animation
	if(Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateGrind
	&&Player.Input.IsPressed(Player.InputActionType.PlayerStomping)
	&&IsStateSonicNotDead
	&&GrindAnmTime==0f
	){
		//if(!SonicNowStop){Player.Sound.PlaySound("sn_windmill_kick");}
		if(!SonicNowStop){
			Player.Sound.PlaySound("sn_climb_jump");
		}
		Player.Animation.SetAnimation("BOARDING_TRICK00");
		GrindAnmTime=1f;	//start play anim
	}
	
	if(Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateGrind
	&&IsStateSonicNotDead
	&&GrindAnmTime>=1f
	){
		GrindAnmTime+=1f;		//playing
	}
	
	if(Player.State.GetCurrentStateID<Sonic.StateID>() ==Sonic.StateID.StateGrind
	&&IsStateSonicNotDead
	&&GrindAnmTime>=40f
	&&GrindAnmTime<60f
	){
		Player.Animation.SetAnimation("GRIND_LAND");
		if(!SonicNowStop){
		Player.Sound.PlaySound("sn_climb_side");
		Player.Sound.PlaySound("sn_climb_side");
		}
		GrindAnmTime=0f;
	}
	
	
	//End GrindAnmTime
	
	if(Player.State.GetCurrentStateID<Sonic.StateID>() !=Sonic.StateID.StateGrind
	){
		GrindAnmTime=0f;
	}
	
}

///////////////////////////////////////////////Boost Speed Up
	
	if(UseFasterBoost){
	
		if(Player.Status.IsGrounded()
		&&Player.Status.IsGroundedSpecial()
		&&!Player.Status.IsSpecialAction()
		){
			if(IS_STATE_FLAG(IsBoost)&&mag<28f){
				kinematics->Velocity +=Player.Kinematics.GetForward() * 13.5f;
			}
			if(IS_STATE_FLAG(IsBoost)&&mag<40f){
				kinematics->Velocity +=Player.Kinematics.GetForward() * 7.5f;
			}
			if(IS_STATE_FLAG(IsBoost)&&mag<45f){
				kinematics->Velocity +=Player.Kinematics.GetForward() * 4.5f;
			}
		}
	
	}
	
///////////////////////////////////////////////EX New Boost Aura
	
	if(
	(IS_STATE_FLAG(IsBoost)
	||IS_STATE_FLAG(IsAirBoost))
	&&IsStateSonicNotDead
	&&!DisableAllExEffect
	&&UseExBoostEffect
	){
		if(LoopTimeTrigger% 2 != 0
			&&IsStateHoldBoost
		){
			Player.Effect.PlayEffect("NewBoostAura1", "ec_so_skill_spinslash_ball01_gpu01");
			Player.Effect.PlayEffect("NewBoostAura2", "ec_so_skill_psycho_aura01_lightning01");
			Player.Effect.PlayEffect("NewBoostAura3", "ec_so_skill_psycho_aura01_lightning02");
		}else{
		Player.Effect.StopEffect("NewBoostAura1");
		Player.Effect.StopEffect("NewBoostAura2");
		Player.Effect.StopEffect("NewBoostAura3");
		Player.Effect.StopEffect("NewBoostAura4");
		Player.Effect.StopEffect("NewBoostAura5");
		}
	}else if(
		IsStateSonicNotDead
		&&LoopTimeTrigger==1
		&&!DisableAllExEffect
	){
		Player.Effect.StopEffect("NewBoostAura1");
		Player.Effect.StopEffect("NewBoostAura2");
		Player.Effect.StopEffect("NewBoostAura3");
		Player.Effect.StopEffect("NewBoostAura4");
		Player.Effect.StopEffect("NewBoostAura5");
	}
	
	if((IS_STATE_FLAG(IsBoost)
	||IS_STATE_FLAG(IsAirBoost))
	&&IsStateSonicNotDead
	&&!DisableAllExEffect
	&&UseExBoostEffect
	){
	if(Player.Input.IsPressed(Player.InputActionType.PlayerBoost)
	||Player.Input.IsPressed(Player.InputActionType.PlayerSonicboom)
		){
		Player.Effect.PlayEffect("NewBoostAuraHit", "ef_so_cyloop_slash_hit01");
		}
	if(Player.Input.IsReleased(Player.InputActionType.PlayerBoost)
	||Player.Input.IsReleased(Player.InputActionType.PlayerSonicboom))
		{
		Player.Effect.StopEffect("NewBoostAuraHit");
		}
	}else if(
		IsStateSonicNotDead
		&&LoopTimeTrigger==2
		&&!DisableAllExEffect
	){
		Player.Effect.StopEffect("NewBoostAuraHit");
	}
	
	
	
	
	
	
	
	
	
///////////////////////////////////////////////EX Edit Goal poes
	if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateNoisyGoal
	){
		if(UseExGoalPoes)
		{
			Player.Animation.SetAnimation("CLOUD_JUMP_TOP");
		}
		IsStateHoldBoost = false;
		IsStateHoldStomp = false;
		IsStateHoldJump = false;
		IsStateHoldSpin = false;
		IsStateAirBoostOn = true;
		IsSpringBoardDash = false;
		IsStateAfterBounceJump =false;
		IsStateFristDiving = true;
		
		IsStateCustomDiving=false;
		ExDivingAnimation=0f;
	}
	
	
	
	
///////////////////////////////////////////////EX Edit Homing curve effect
	if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateHomingAttack
	&&IsStateSonicNotDead
	&&UseExHomingCurve
	){
		if(Player.Status.IsSideView())
		{
			kinematics->Position +=new Vector3(0.0f, 0.4f, 0.0f);
		}else{
			kinematics->Position +=new Vector3(0.0f, 0.55f, 0.0f);
		}
		
		//Player.Animation.SetAnimation("COMBO_CRASHER_LOOP");
		IsStateAirBoostOn = true;
		IsStateAfterBounceJump =false;
		IsStateFristDiving = true;
	}
	
	


//////////////////////////////////////////////SpringBoardDash X button
//////////////////////////////////////////////This is Old design Code
//////////////////////////////////////////////Because there were no bugs, it replaced the new version
//////////////////////////////////////////////This version can only be used in a spring or springboard state


	if(
	UseExSpringBoardDash
	&&(
		Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpringJump
		||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateJumpBoardLaunch
		||IS_STATE_FLAG(IsSpringJump)
	)
	){
		IsSpringBoardDashReady=true;
		SpringBoardDashStop=5.0f;
		IsSpringBoardDash=false;
		IsNoHomingDash=false;
	}else{
		IsSpringBoardDashReady=false;
	}
	
	
	
	if(IsStateSonicNotDead
	&&Player.Input.IsPressed(Player.InputActionType.PlayerAttack)
	&&IsSpringBoardDashReady
	&&!NowInBattleState
	){	
		if(!IsSpringBoardDash){
			Player.State.SetState(Sonic.StateID.StateFall);
			Player.Animation.SetAnimation("COMBO_CHARGE_LOOP");
			Player.Sound.PlaySound("sn_homingshot_shoot");
			kinematics->Velocity = new Vector3(0.0f,0.0f,0.0f);
			IsSpringBoardDash=true;
			IsSpringBoardDashReady=false;
			}else{
			IsSpringBoardDash=true;
			IsSpringBoardDashReady=false;
		}
	}
	
	if(IsStateInNormalAir
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateHomingAttack
	&&IsSpringBoardDash
	&&IsStateSonicNotDead
	){
		Player.Animation.SetAnimation("COMBO_CRASHER_LOOP");
		if(SpringBoardDashStop>=0f)
			{
				Player.State.SetState(Sonic.StateID.StateFall);
				kinematics->Velocity = new Vector3(0.0f,0.025f,0.0f);
				SpringBoardDashStop-=0.8f;
				return;
			}
		
		if(Player.Status.IsSideView())
		{
			if(horzMag<175f)
			{
				kinematics->Velocity +=Player.Kinematics.GetForward() *98.85f;
				kinematics->Velocity +=new Vector3(0.0f, 0.22f, 0.0f);
			}
		}else
		{
			if(horzMag<285f)
			{
				kinematics->Velocity +=Player.Kinematics.GetForward() *138.85f;
				kinematics->Velocity +=new Vector3(0.0f, 0.75f, 0.0f);
			}
		}
	}
	
	
	if(
	Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateJumpBoardLaunch
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpringJump
	||IS_STATE_FLAG(IsSpringJump)
	){
		IsSpringBoardDash=false;
		SpringBoardDashStop=5.0f;
		if(UseExSpringBoardDash){
		IsSpringBoardDashReady=true;
		}
	}
	
	
	//SpringBoardDash END
	if(
	SpringBoardDashStop<=0
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateHomingAttack
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStomping
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoostCharge
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateQuickStepRoot
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateWallActionRoot
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateHangPole
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDivingRoot
	){
		IsSpringBoardDash=false;
		IsSpringBoardDashReady=false;
	}
	
	if(
	Player.Status.IsGrounded()
	||Player.Status.IsGroundedSpecial()
	){
		IsSpringBoardDashReady=false;
		SpringBoardDashStop=5.0f;
	}

///////////////////////////////////////////////EX Lite No Homing Dash
	
// How to Ready
	if(
	UseExHomingDash
	&&NoHomingDashTime<=0.0f
	&&IsStateSonicNotDead
	){
		IsNoHomingDashReady=false;
		if(LoopTimeTrigger==8&&!DisableAllExEffect)
		{
		Player.Effect.StopEffect("LowHomingLine1");
		}
	}else if(
	UseExHomingDash
	&&IsStateSonicNotDead
	&&!Player.Status.IsGrounded()
	&&!NowInBattleState
	//&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateHomingAttack
	//&&!IS_STATE_FLAG(IsHoming)
	&&!IsSpringBoardDash
	){
		IsNoHomingDashReady=true;
	}
	
	
//X to Dash Start
	if(
	UseExHomingDash
	&&IsNoHomingDashReady
	&&Player.Input.IsPressed(Player.InputActionType.PlayerAttack)
	&&!Player.Status.IsGrounded()
	&&IsStateInNormalAir
	&&IsStateSonicNotDead
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateHomingAttack
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrind
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrindRoot
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateHangPole
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateWallActionRoot
	//&&!IS_STATE_FLAG(IsHoming)
	&&!IS_STATE_FLAG(IsSpringJump)
	&&!NowInBattleState
	&&!IsSpringBoardDash
	
	){
		IsStateCustomDiving=false;
		ExDivingAnimation=0f;
		
		IsNoHomingDash=true;
		if(NoHomingDashTime==10.0f)
		{	
			Player.Effect.StopAnimationEffects();
			IsNoHomingDashReady=true;
			if(!SonicNowStop){Player.Sound.PlaySound("sn_crossslash_shoot");}
			Player.State.SetState(Sonic.StateID.StateFall);
			kinematics->Velocity =Player.Kinematics.GetForward() * 10.00f+new Vector3(0.0f,4.0f,0.0f);

			
			if(!DisableAllExEffect
			){
				Player.Effect.PlayEffect("LowHomingLine1", "ef_so_skill_accelerator_aura01");
			}
		}else if(
		UseExHomingDash
		&&NoHomingDashTime<=0.0f
		&&IsStateSonicNotDead
		){
			IsNoHomingDashReady=true;
			IsNoHomingDash=false;
			NoHomingDashTime=10.0f;
		}
	}
	
//Dashing
	
	if(UseExHomingDash
	&&IsNoHomingDash
	&&NoHomingDashTime>0.0f
	&&IsStateSonicNotDead
	&&IsStateInNormalAir
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateHomingAttack
	&&!IS_STATE_FLAG(IsHoming)
	&&!NowInBattleState
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateSpringJump
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateJumpBoardLaunch
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateHomingAttack
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrindRoot
	&&IsNoHomingDashReady
	){
		NoHomingDashTime-=0.5333f;
		
		if(NoHomingDashTime<0f)
		{
			return;
		}else if(
			Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFall
			){
			Player.Animation.SetAnimation("JUMP_BALL");
			
			//Normal
			if(NoHomingDashTime>0.0f)
				{
				if(horzMag<20f&&Player.Status.IsSideView())
				{
					kinematics->Velocity +=Player.Kinematics.GetForward() * (10.00f);
					kinematics->Velocity +=new Vector3(0.0f,3.25f,0.0f);//Resist gravity descent
				}else if(horzMag<40f){
					kinematics->Velocity +=Player.Kinematics.GetForward() * (12.00f);
					kinematics->Velocity +=new Vector3(0.0f,3.25f,0.0f);//Resist gravity descent
				}
			}
			
			//UseStrongVer Additional Speed
			if(horzMag<200f&&NoHomingDashTime>0.0f&&UseStrongHomingDash)
			{
				kinematics->Velocity +=Player.Kinematics.GetForward()*50.00f;
				kinematics->Velocity +=new Vector3(0.0f,0.25f,0.0f);//Resist gravity descent
			}
			
			//Set dash time, 0~10 and.333 or .666 Number that cannot be divided by an integer
			//The smaller the number, the longer the dash time
			//The larger the number, the shorter the dash time
			}
		}
	
	
	if(UseExHomingDash
		&&NoHomingDashTime<0.0f
		&&IsStateSonicNotDead
		&&!Player.Status.IsGrounded()
		&&IsStateInNormalAir
		&&Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFall
		){
			Player.Effect.StopAnimationEffects();
			Player.Animation.SetAnimation("BUMP_JUMP_FALL");
			NoHomingDashTime=0.0f;
			if(UseStrongHomingDash){
			kinematics->Velocity*=0.35f;
			}
		}
		
		
	
//Dash End
	if (Player.Status.IsGrounded()
	|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStompingFlip 
	|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStompingBounce 
	|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateHomingAttack
	|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateGrind
	){
		IsNoHomingDashReady=true;
		IsNoHomingDash=false;
		NoHomingDashTime=10.0f;
		IsStateInNormalAir=false;
		if(LoopTimeTrigger==8&&!DisableAllExEffect){
			Player.Effect.StopEffect("LowHomingLine1");
		}
	}
	
	
////////////////////Blue Tail Homing Attack and Stomp Trail in Animation by Weezley

//Blue Homing Stomp Trail by Weezley
//Modified version by StarNoodle495
//This version does not use of static bool

	if(!DisableAllExEffect&&UseBlueTailEffect){   //BlueTail ON OFF

		if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateHomingAttack
		||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateHomingAttackInStorm
		){
			if(Player.Input.IsPressed(Player.InputActionType.PlayerAttack)
			&&IsStateSonicNotDead
			){
			Player.Effect.PlayEffect("Homing Line1", BlackboardStatus.IsSuper() ? "ec_ss_stomp_locus01" : "ec_so_stomp_locus01")
			Player.Effect.PlayEffect("Homing Line2", "ss_dash_smoke02_mesh01");
			}
		}else if(IsStateSonicNotDead&&LoopTimeTrigger==1){
			Player.Effect.StopEffect("Homing Line1");
			Player.Effect.StopEffect("Homing Line2");
		}
	
		if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStompingDown){
			if(Player.Input.IsPressed(Player.InputActionType.PlayerStomping)
			&&IsStateSonicNotDead
			){
			Player.Effect.PlayEffect("Stomp Line", "ec_ft_pow_dash_ge01_round_blue01")
			Player.Effect.PlayEffect("Stomp Line", "ec_ft_pow_dash_ge01_round_blue01")
			Player.Effect.PlayEffect("Stomp Line", "ec_ft_pow_dash_ge01_round_blue01")
			}
		}else if(IsStateSonicNotDead&&LoopTimeTrigger==1){
			Player.Effect.StopEffect("Stomp Line");
		}
	
	}		//BlueTail ON OFF
	


////////////////////////////////////////////////////////////////////////
//UseExAntiskidShoe
if(UseExAntiskidShoe){		//UseExAntiskidShoe ON OFF Start


//////////////////////////////////////////////Stomp Land edit
	if(Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateStompingLand
	&&IsStateSonicNotDead
	&&joystickX+joystickY>0.05f
	){
		if(Player.Input.IsPressed(Player.InputActionType.PlayerBoost)){
		Player.State.SetState(Sonic.StateID.StateAirBoost);
		}
		if(Player.Input.IsPressed(Player.InputActionType.PlayerJump)){
		Player.State.SetState(Sonic.StateID.StateBaseJump);
		}
	}
	
	
///////////////////////////////////////////////EX Fall Slope edit
	if(IsStateSonicNotDead&&Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateFallSlope
	&&Player.Input.IsPressed(Player.InputActionType.PlayerJump)
	&&IsStateSonicNotDead
	){
		Player.State.SetState(Sonic.StateID.StateBounceJump);
		kinematics->Velocity +=kinematics->Velocity*6.55f;
	}
	
	
//////////////////////////////////////////EX Stomp+Jump Stomping can use jump

	if(Player.State.GetCurrentStateID<Sonic.StateID>()==Sonic.StateID.StateStompingDown
	&&Player.Input.IsPressed(Player.InputActionType.PlayerJump)
	&&IsStateSonicNotDead
	){
		Player.State.SetState(Sonic.StateID.StateCloudJump);
	}

	
////////////////////////////////////////////////EX force End Drop Dash
	
	if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDropDash
	&&Player.Input.IsReleased(Player.InputActionType.PlayerJump)
	&&IsStateSonicNotDead
	){
		Player.State.SetState(Sonic.StateID.StateRun);
	}
	
	
///////////////////////////////////////////////Release some control


	if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateParalysis
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFallFlip
	){
		Player.State.SetState(Sonic.StateID.StateCloudJump);
	}
	
	
	if(
	Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateGuardedFlipBack
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateQuickCyloop
	&&IsStateSonicNotDead
	){
		
		Player.Animation.SetAnimation("JUMP_BALL");
		
		if(Player.Input.IsPressed(Player.InputActionType.PlayerCyloop)
		){
			IsStateCustomDiving=false;
			Player.State.SetState(Sonic.StateID.StateQuickCyloop);
		}
		
		if(Player.Input.IsPressed(Player.InputActionType.PlayerAttack)
		){
			Player.State.SetState(Sonic.StateID.StateHomingAttack);
		}
		
		if(Player.Input.IsPressed(Player.InputActionType.PlayerBoost)
		){
			Player.State.SetState(Sonic.StateID.StateAirBoost);
		}
		
		if(Player.Input.IsPressed(Player.InputActionType.PlayerStomping)
		){
			Player.State.SetState(Sonic.StateID.StateStompingDown);
		}
		
		if(Player.Input.IsPressed(Player.InputActionType.PlayerJump)
		){
			Player.State.SetState(Sonic.StateID.StateDoubleJump);
		}
		
	}
	
}			//UseExAntiskidShoe ON OFF End

/////////////////////////////////////////////Y-Y in air to Free Quick Cyloop in Battle
	
//Air

if(UseExFreeCyloop)
{
	if (Player.Input.IsPressed(Player.InputActionType.PlayerCyloop)
	&&Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateQuickCyloop
	&&NowInBattleState
	&&IsStateInNormalAir
	){
		IsStateCustomDiving=false;
		Player.State.SetState(Sonic.StateID.StateQuickCyloop);
	}
}

//////////////////////////////////////////////Parry Little Fall

	if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateParry
	&&!Player.Status.IsGrounded()
	){
		kinematics->Position +=new Vector3(0f,-0.0075f,0f);
	}
	
	
//Parry Effect

	if((Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateParry
	||Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateParryStand)
	&&IsStateSonicNotDead
	&&!DisableAllExEffect
	){
		if(LoopTimeTrigger==0
			){
				Player.Effect.PlayEffect("ParryEffect1", "ec_so_skill_accelerator_aura01_gpu01");
				Player.Effect.PlayEffect("ParryEffect2", "ec_so_skill_homingshot_bullet01_pointlight01");
			}
		}else if(
			IsStateSonicNotDead
			&&LoopTimeTrigger==8
			&&!DisableAllExEffect
		){
			Player.Effect.StopEffect("ParryEffect1");
			Player.Effect.StopEffect("ParryEffect2");
		}
	
// A-A HomingAttack wip
	
if(UseAAHomingAttack){
	var LockOnObject = Player.Status.GetLockOnTarget();

	if(!Player.Status.IsGrounded()
	&&Player.Input.IsPressed(Player.InputActionType.PlayerJump)
	&&InNormalAirTime>0.01f
	&&LockOnObject != null
	){
		Player.State.SetState(Sonic.StateID.StateHomingAttack);
		return;
	}
}
	
///////////////////////////////////////////////Grounded State ID initialization
	
	if (Player.Status.IsGrounded()
	|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStompingFlip 
	|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStompingBounce 
	|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateHomingAttack
	|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateGrind
	){
		IsStateAirBoostOn = true;
		IsStateAfterBounceJump =false;
		IsStateFristDiving = true;
		IsStateInNormalAir=false;
		IsStateCustomDiving=false;
		ExDivingAnimation=0f;
	}
///////////////////////////////////////////////End

	LastPosition=kinematics->Position;
	LastRotation=kinematics->Rotation;
	LastVelocity=kinematics->Velocity;
}


























Code "Smooth Dynamic FOV"  by "Trepe StarNoodle495"
//
	#load "System.Numerics.dll"
	
	#include "BlackboardStatus" noemit
    #include "Reflection" noemit
	
	#lib "BlackboardStatus"
    #lib "Reflection"
    #lib "Player"
    #lib "GameObject"
    #import "Cameras"
    #import "GOComponents"
	#lib "HMM"
	#lib "INI"
	
	using System;
	using System.Numerics;

	//use ini config
	static bool IsConfigInitialised = false;
	static string currentModDirectory;
	
	static bool UseCameraDynamicFOV=false;
	static Vector3 LastPosition;
	static float ChangeFov=0f;
	
// ini Config Example
{
	if (!IsConfigInitialised)
	{
		var modsQuery = HMM.FindModsByName("EX Moveset");
		if (modsQuery.Count == 1)
		{
			currentModDirectory = modsQuery[0].Path;
			string modConfigIniPath = System.IO.Path.Combine(modsQuery[0].Path, "config.ini");
			var ini = INI.Read(modConfigIniPath);
		
			UseCameraDynamicFOV = bool.Parse(ini["Main"]["UseCameraDynamicFOV"]);
		}else{
			Console.WriteLine($"[EX Moveset] Failed to locate mod directory.");
			return;
		}
		IsConfigInitialised = true;
	}
}
	
	if(!UseCameraDynamicFOV)
	return;
	
	var kinematics = Player.Kinematics.Get();
	if (kinematics == null)
	return;
	
	float mag = kinematics->Velocity.Length();// Define velocity on X/Y/Z axes
	float horzMag = Player.Kinematics.GetHorizontalMagnitude();// Define velocity only on X axis

//
{
	
	float KPosX=kinematics->Position.X;
	float KPosY=kinematics->Position.Y;
	float KPosZ=kinematics->Position.Z;
	float LposX=LastPosition.X;
	float LposY=LastPosition.Y;
	float LposZ=LastPosition.Z;
	float DifferencePosX=KPosX-LposX;
	float DifferencePosY=KPosY-LposY;
	float DifferencePosZ=KPosZ-LposZ;
	if(DifferencePosX<0){DifferencePosX*=-1;}
	if(DifferencePosY<0){DifferencePosY*=-1;}
	if(DifferencePosZ<0){DifferencePosZ*=-1;}
	float SpeedSwitch=DifferencePosX+DifferencePosY+DifferencePosZ;
	
	if(ChangeFov+0.0005f<SpeedSwitch){ChangeFov+=0.0005f
	}else if(ChangeFov-0.005f>SpeedSwitch){ChangeFov-=0.0005f}
	if(ChangeFov+0.003f<SpeedSwitch){ChangeFov+=0.001f
	}else if(ChangeFov-0.003f>SpeedSwitch){ChangeFov-=0.001f}
	if(ChangeFov+0.006f<SpeedSwitch){ChangeFov+=0.002f
	}else if(ChangeFov-0.006f>SpeedSwitch){ChangeFov-=0.002f}
	if(ChangeFov+0.022f<SpeedSwitch){ChangeFov+=0.003f
	}else if(ChangeFov-0.022f>SpeedSwitch){ChangeFov-=0.003f}
	
    var pPlayer = Player.GetPlayerData();
    if (pPlayer == null)
        return;

    var pGOCCamera = GameObject.GetGOC<GOCCamera>(&pPlayer->GameObject);
    if (pGOCCamera == null)
        return;

    var pStandardCamera = pGOCCamera->GetCameraController<StandardCamera>();
    if (pStandardCamera == null)
        return;

    pStandardCamera->pContext->SetFieldOfView(MathHelpers.Lerp(60.0f, 89.0f,Math.Min(ChangeFov-0.075f,1)));
	LastPosition=kinematics->Position;
}
































