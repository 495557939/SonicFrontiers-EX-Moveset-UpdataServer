Code "ExMoveset"  by "Luna Trepe Hyper Weezley StarNoodle495"
//Air+Y Free Falling
//Air+B_Hold Higher Bounce Jump
//RT+A Free Bump Jump
//RT+A+X Easy EX Homing Boost
//RT+B Free Drift
//A to Jumpboard Free Release Jumpboard
//X to Spring Board Dash
//A-A Higher Double Jump
//A-A Lost world style curve homing trajectory
//A-X Gens Style Lite No Homing Attack
//LT Fast Stomp+SpinDash
//LT+RT Forward Stomp SpinDash
//Grind+LT Spin in Grind to acceleration
//Grind+B Grind Reverse move
//Grind+X Lite Grind accelerate


    #load "System.Numerics.dll"
    using System;
    using System.Numerics;
	#include "ReflectionHelpers" noemit
	
	static bool IsHigherDoubleJump = false;
	
    static bool IsInitialised = false;
    static bool IsStateFristDiving = true;
    static bool IsStateDivingAirBoostOn = true;
	static bool IsStateHoldBoost = false;
	static bool IsStateHoldStomp = false;
    static bool IsStateSonicNotDead = true;
    static bool IsStateAfterBounceJump=false;
	static bool IsStateHoldJump = false;
	static bool IsStateHoldSpin = false;
	static bool IsStateInNormalAir=false;
	static bool IsNewBoostAura=false;
	
	static bool IsSpringBoardDashReady = false;
	static bool IsSpringBoardDash = false;
	static float SpringBoardDashStop=4.0f;

	static bool IsNoHomingDashReady=false;
	static bool IsNoHomingDash=false;
	static float NoHomingDashTime=10.0f;
	
	static bool stompPlayed = false;
    static bool homingPlayed = false;
////////////////////////////////////////
//Patch "Hide Drift Input Prompt" in "UI" by "Hyper" does "Hides the input prompt that covers up Sonic when using drift dash panels."
{
    WriteNop
    (
        /* 0x14081E868 */
        ScanSignature
        (
            "\xE8\x00\x00\x00\x00\x48\x8D\x4C\x24\x00\xE8\x00\x00\x00\x00\x4C\x8D\x05\x00\x00\x00\x00\x48\x8B\xD6\x48\x8D\x8C\x24\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x48\x8D\x8D\x00\x00\x00\x00\x48\x8B\xD0\xE8\x00\x00\x00\x00\x41\xB0\x01\xBA\x00\x00\x00\x00\x48\x8B\xCE\xE8\x00\x00\x00\x00\xBA\x00\x00\x00\x00\x48\x8B\xCE\xE8\x00\x00\x00\x00\xB2\x01\x48\x8B\xCE\x48\x8B\x9C\x24\x00\x00\x00\x00\x48\x81\xC4\x00\x00\x00\x00\x41\x5E\x5E\x5D\xE9\x00\x00\x00\x00",
            "x????xxxx?x????xxx????xxxxxxx????x????xxx????xxxx????xxxx????xxxx????x????xxxx????xxxxxxxxx????xxx????xxxxx????"
        ),
        5
    );
}
////////////////////////////////////////Disable Hit Stop by Hyper
{
    WriteAsmHook
    (
        $@"
            xorps  xmm3, xmm3
            movaps xmm7, xmm3
            mov    r8, [rcx + 0xB0]
            mov    esi, edx
            add    rax, r8
        ",

        /* 0x147689E7F */
        ScanSignature
        (
            "\x0F\x28\xFB\x4C\x8B\x81\xB0\x00\x00\x00",
            "xxxxxxxxxx"
        ),

        HookBehavior.Replace
    );
}
////////////////////////////////////////FreeFall Code by Luna
if (!IsInitialised)
{
    WriteNop
    (
        // 0x140893889 
        ScanSignature
        (
            "\xE8\xCC\xCC\xCC\xCC\x41\xB0\x01\xBA\x0D\x00\x00\x00\x49\x8B\xCF",
            "x????xxxxxxxxxxx"
        ),
    5
	);
    IsInitialised = true;
}
////////////////////////////////////////Code "LSD is Drift" by "Trepe" 
var kinematics = Sonic.Kinematics.Get();
if (kinematics == null)
    return;
// Define velocity on X/Y/Z axes
float mag = kinematics.Velocity->Length();
// Define velocity only on X axis
float horzMag = Sonic.Kinematics.GetHorizontalMagnitude();
////////////////////////////////////////
//OpenWorldOlny
//if (BlackboardStatus.Get() != 0 && !Bitwise.Test(*BlackboardStatus.GetWorldFlags(), (uint)BlackboardStatus.WorldFlags.IsCyberSpace))
//{

//ALL Stage
if (BlackboardStatus.Get() != 0&&!BlackboardStatus.IsSuper())
{

/////////////////////////////////////////////////////////////
//Infinite Dead Bug Fix
	if (
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateFallingDead ||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateDead ||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateLavaDead ||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StatePressDead ||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateSuffocatingDead ||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateUpDead  ||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateFallWithKodama ||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateFallWithCannonball ||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateJumpWithKodama ||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateRunWithKodama ||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateRunWithCannonball ||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateStandWithKodama ||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateStandWithCannonball ||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateWithAnimalRoot ||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateWithAnimalRoot ||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateGoal||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateGoal2||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateFixedGoal||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateTalkMode||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateThrowCannonball||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateTakeBehindSS||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateTakeBehind||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateHangPole||
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateUpDownPole
	)
	{
		IsStateSonicNotDead = true;
	}
	
	if (
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateFallingDead ||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateDead ||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateLavaDead ||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StatePressDead ||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateSuffocatingDead ||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateUpDead  ||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateFallWithKodama ||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateFallWithCannonball ||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateJumpWithKodama ||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateRunWithKodama ||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateRunWithCannonball ||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateStandWithKodama ||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateStandWithCannonball ||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateWithAnimalRoot ||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateWithAnimalRoot ||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateGoal||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateGoal2||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateFixedGoal||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateTalkMode||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateThrowCannonball||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateTakeBehindSS||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateTakeBehind||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateHangPole||
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateUpDownPole
	)
	{
		IsStateSonicNotDead = false;
	}
////////////////////////////////////////////////////////////////It's normal in the air state
		if(
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateFall||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateFallFlip||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateFan||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateGrindDamageAir||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateGrindJump||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateGrindDoubleJump||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateJump||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateJumpBoardLaunch||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateBounceJump||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateRecoveryJump||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateSpringJump||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateLightDash||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateAirBoost||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateStompingDown||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateWallJump||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateBumpJump||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateQuickStepJump||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateQuickStepDoubleJump||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateSpinBoostCharge||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateDoubleJump||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateStompingBounce||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateCloudJump||
		Bitwise.Test(*BlackboardStatus.GetStateFlags(), (uint)BlackboardStatus.StateFlags.IsHoming)||
		Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateWallJump
		){
			IsStateInNormalAir=true;
		}else{
			IsStateInNormalAir=false;
			Sonic.Effect.StopEffect("Homing Line");
			Sonic.Effect.StopEffect("Stomp Line")
			Sonic.Effect.StopEffect("LowHomingLine1");
			Sonic.Effect.StopEffect("LowHomingLine1");
			Sonic.Effect.StopEffect("LowHomingLine2");
		}
		
		if(Sonic.IsGrounded()){IsStateInNormalAir=false;}
////////////////////////////////////////////////////////////////Diving
//Allow simultaneous use air boost
//Press the Y button to Diving
	if (Sonic.State.GetCurrentStateID() == Sonic.StateID.StateAirBoost)
    {
		IsStateDivingAirBoostOn = false;
	}
	if (Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerCyloop) &&IsStateInNormalAir
	&& !Sonic.IsGrounded()
	&& Sonic.State.GetCurrentStateID() !=Sonic.StateID.StateAirBoost
	&&Sonic.State.GetCurrentStateID() != Sonic.StateID.StateQuickCyloop
	)
		{	
			if(IsStateSonicNotDead&&Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateDiving
			||Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateDivingFall)
			{
			if(IsStateFristDiving)
				{
				*kinematics.Velocity +=*kinematics.Velocity*0.75f;
				}
			Sonic.State.SetState(Sonic.StateID.StateDiving);
			IsStateFristDiving=false;
			if (Sonic.State.GetCurrentStateID() == Sonic.StateID.StateSpringJump && IsStateSonicNotDead)
				{
				Sonic.State.SetState(Sonic.StateID.StateFall);
				}
			}else{
				if(IsStateFristDiving)
				{
					//*kinematics.Velocity +=*kinematics.Velocity*0.75f;
					//*kinematics.Velocity +=Sonic.Kinematics.GetForward() * (0.75f);
					
					*kinematics.Velocity +=Sonic.Kinematics.GetForward() * (0.4f);
					*kinematics.Velocity +=*kinematics.Velocity*0.3f;
				}
			Sonic.State.SetState(Sonic.StateID.StateDiving);
			IsStateFristDiving=false;
		}
    }
//When Diving and after Air Boost
	else if (IsStateSonicNotDead&&Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerCyloop) && !Sonic.IsGrounded() && Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateAirBoost)
    {
			Sonic.State.SetState(Sonic.StateID.StateDivingFall);
    }
//When Diving and Not yet Air Boost
    else if (Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerBoost) && Sonic.State.GetCurrentStateID() == Sonic.StateID.StateDivingFall)
    {
		if (IsStateDivingAirBoostOn&&IsStateSonicNotDead&&!Sonic.IsGrounded())
		{
			Sonic.State.SetState(Sonic.StateID.StateAirBoost);
			IsStateDivingAirBoostOn = false;
		}
//Refuse to use air boost simultaneously
		else if (IsStateDivingAirBoostOn == false)
		{
			if(IsStateSonicNotDead)
			{
				if(IsStateFristDiving)
					{
					*kinematics.Velocity +=*kinematics.Velocity;
					}
				Sonic.State.SetState(Sonic.StateID.StateDivingFall);
				IsStateDivingAirBoostOn=false;
				IsStateFristDiving=false;
				//When StateDivingFall to the ground
			}
		}
	}
//////////////////////////////////Diving Maintain Speed
	if(horzMag<100.0f && Sonic.State.GetCurrentStateID() == Sonic.StateID.StateDiving)
		{
		*kinematics.Velocity +=Sonic.Kinematics.GetForward() * (0.05f);
		}
	//if(horzMag<0f && Sonic.State.GetCurrentStateID() == Sonic.StateID.StateDivingFall)
	//	{
	//	*kinematics.Velocity +=Sonic.Kinematics.GetForward() * (-0.25f);
	//	}
	if(Sonic.State.GetCurrentStateID() == Sonic.StateID.StateDivingFall)
		{
		*kinematics.Velocity +=new Vector3(0.0f, -0.9f, 0.0f);
		}
//////////////////////////////////
//When Diving input A B X LS Action

    if (Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerJump) || Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerLeftStep) ||Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerRightStep) || Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerLightDash))
    {
		if (Sonic.State.GetCurrentStateID() == Sonic.StateID.StateDiving)
		{
			if(IsStateSonicNotDead&&!IsStateAfterBounceJump)
			{	
				Sonic.State.SetState(Sonic.StateID.StateBounceJump);
				IsStateAfterBounceJump=true;
			}else if(IsStateSonicNotDead){
				Sonic.State.SetState(Sonic.StateID.StateCloudJump);
			}
		}
    }
	
    if (Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerAttack))
    {
		if (Sonic.State.GetCurrentStateID() == Sonic.StateID.StateDiving&&IsStateSonicNotDead)
		{
			Sonic.State.SetState(Sonic.StateID.StateCloudJump);
		}
    }

	if (Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerStomping) && Sonic.State.GetCurrentStateID() == Sonic.StateID.StateDiving)
	{
		if(IsStateSonicNotDead)
		{
			Sonic.State.SetState(Sonic.StateID.StateStompingDown);
		}
	}

	if (Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerLightDash) && Sonic.State.GetCurrentStateID() == Sonic.StateID.StateDiving)
    {
		if(IsStateSonicNotDead)
		{
			Sonic.State.SetState(Sonic.StateID.StateLightDash);
		}
    }
	
	
//////////////////////////////////////////////////////////////Instantaneous Spin boost
/*

	if (Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerSonicboom) && Sonic.State.GetCurrentStateID() == Sonic.StateID.StateDiving)
    {
		if(IsStateSonicNotDead)
		{
			Sonic.State.SetState(Sonic.StateID.StateSpinBoost);
		}
    }
	if (Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerSonicboom) && Sonic.State.GetCurrentStateID() == Sonic.StateID.StateSpinBoostCharge)
    {
		if(IsStateSonicNotDead)
		{
			Sonic.State.SetState(Sonic.StateID.StateSpinBoost);
		}
    }
	if (Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerSonicboom) && Sonic.State.GetCurrentStateID() == Sonic.StateID.StateGrindJump)
    {
		if(IsStateSonicNotDead)
		{
			Sonic.State.SetState(Sonic.StateID.StateSpinBoost);
		}
    }
	if (Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerSonicboom) && Sonic.State.GetCurrentStateID() == Sonic.StateID.StateGrindDoubleJump)
    {
		if(IsStateSonicNotDead)
		{
			Sonic.State.SetState(Sonic.StateID.StateSpinBoost);
		}
    }
*/ 

	if (!Bitwise.Test(*BlackboardStatus.GetWorldFlags(), (uint)BlackboardStatus.WorldFlags.IsBattle)&&IsStateSonicNotDead&&Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerSonicboom)&& Sonic.IsGrounded())
    {
		Sonic.State.SetState(Sonic.StateID.StateSpinBoost);
    }
	if (IsStateInNormalAir&&!Bitwise.Test(*BlackboardStatus.GetWorldFlags(), (uint)BlackboardStatus.WorldFlags.IsBattle)&&IsStateSonicNotDead&&Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerSonicboom)&&!Sonic.IsGrounded()&&Sonic.State.GetCurrentStateID() !=Sonic.StateID.StateGrind)
    {
		Sonic.State.SetState(Sonic.StateID.StateStompingDown);
    }
	if(Bitwise.Test(*BlackboardStatus.GetWorldFlags(), (uint)BlackboardStatus.WorldFlags.IsBattle)&&IsStateSonicNotDead&&Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerSonicboom)&&!Sonic.IsGrounded()&&Sonic.State.GetCurrentStateID() !=Sonic.StateID.StateGrind)
	{
		Sonic.State.SetState(Sonic.StateID.StateSonicBoomKick);
	}
	
	
	if(Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerSonicboom))
	{
		IsStateHoldSpin=true;
	}
	if(Sonic.Input.IsReleased(Sonic.PlayerActionType.PlayerSonicboom))
	{
	IsStateHoldSpin=false;
	}
	if(IsStateSonicNotDead&&IsStateHoldSpin&&IsStateInNormalAir)
	{
		if(Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateStomping||Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateStompingBounce||Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateStompingDown||Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateStompingDown)
		{
			Sonic.Animation.SetAnimation("JUMP_BALL");
			//Sonic.Effect.StopAnimationEffects();
		}
	}
//
//    if (Sonic.State.GetCurrentStateID() == Sonic.StateID.StateHomingAttack)
//    {
//        Sonic.Animation.SetAnimation("BOOST_AIR");
//        Sonic.Effect.StopAnimationEffects();
//    }

//////////////////////////////////////////////////////Forward Stomp (Air Spin) LT+RT
	if (IsStateInNormalAir&&Sonic.State.GetCurrentStateID() !=Sonic.StateID.StateWaterFall&&IsStateSonicNotDead&&Sonic.State.GetCurrentStateID() == Sonic.StateID.StateStompingDown&&IsStateHoldSpin&&!IsStateHoldStomp&&IsStateHoldBoost)
		{
			if(!Sonic.IsSideView())
			{
			*kinematics.Velocity+= Sonic.Kinematics.GetForward()*2.85f+(new Vector3(0.0f, 2.05f, 0.0f));
			}else{
			*kinematics.Velocity+= Sonic.Kinematics.GetForward()*1.15f+(new Vector3(0.0f, 0.95f, 0.0f));
			}
		}
//Force into Stomping
	if (IsStateInNormalAir&&Sonic.State.GetCurrentStateID() !=Sonic.StateID.StateWaterFall&&IsStateSonicNotDead&&!Bitwise.Test(*BlackboardStatus.GetWorldFlags(), (uint)BlackboardStatus.WorldFlags.IsBattle)&&IsStateSonicNotDead&&Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerSonicboom)&&!Sonic.IsGrounded()&&Sonic.State.GetCurrentStateID() !=Sonic.StateID.StateGrind)
    {
		Sonic.State.SetState(Sonic.StateID.StateStompingDown);
    }
////////////////////////////////////////////////////Super Bounce Jump
	if (Sonic.State.GetCurrentStateID() == Sonic.StateID.StateBounceJump && !Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerBoost))
    {
	if(IsStateSonicNotDead && IsStateHoldStomp)
		{
		IsStateHoldStomp=false;
		Sonic.State.SetState(Sonic.StateID.StateBounceJump);
		if(!IsStateAfterBounceJump&&IsStateSonicNotDead)
			{
			*kinematics.Velocity +=*kinematics.Velocity*0.45f;
			Sonic.State.SetState(Sonic.StateID.StateBounceJump);
			}
		IsStateAfterBounceJump=true;
		}
    }
//when Super Bounce Jump input RT X B A  L R button
	if (!Sonic.IsGrounded() &&Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerBoost)&&Sonic.State.GetCurrentStateID() == Sonic.StateID.StateBounceJump)
    {
		if(IsStateDivingAirBoostOn&&IsStateSonicNotDead)
			{
			Sonic.State.SetState(Sonic.StateID.StateAirBoost);
			IsStateDivingAirBoostOn= false;
			}
	}
	if (!Sonic.IsGrounded() &&Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerAttack)&&Sonic.State.GetCurrentStateID() == Sonic.StateID.StateBounceJump && IsStateSonicNotDead)
    {
		Sonic.State.SetState(Sonic.StateID.StateCloudJump);
		IsStateAfterBounceJump=true;
	}
	if (!Sonic.IsGrounded() &&Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerStomping)&&Sonic.State.GetCurrentStateID() == Sonic.StateID.StateBounceJump && IsStateSonicNotDead)
    {
		Sonic.State.SetState(Sonic.StateID.StateAquaBallStomping);
	}
	if (!Sonic.IsGrounded() &&Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerLeftStep)&&Sonic.State.GetCurrentStateID() == Sonic.StateID.StateBounceJump && IsStateSonicNotDead)
    {
		Sonic.State.SetState(Sonic.StateID.StateRecoveryJump);
	}
		if (!Sonic.IsGrounded() &&Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerRightStep)&&Sonic.State.GetCurrentStateID() == Sonic.StateID.StateBounceJump && IsStateSonicNotDead)
    {
		Sonic.State.SetState(Sonic.StateID.StateRecoveryJump);
	}
////////////////////////////////////////////////////SimpleDrift
//Determine the time to press the RT button
    var DriftStart = (Sonic.State.GetCurrentStateID() == Sonic.StateID.StateRun) || (Sonic.State.GetCurrentStateID() == Sonic.StateID.StateSpinBoost)|| (Sonic.State.GetCurrentStateID() == Sonic.StateID.StateSliding) ||(Sonic.State.GetCurrentStateID() == Sonic.StateID.StateDropDash&&Sonic.State.GetCurrentStateID() == Sonic.StateID.StateDriftAir) && horzMag > 14f;
		if (Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerBoost))
	{
		IsStateHoldBoost = true;
	}
		if (Sonic.Input.IsReleased(Sonic.PlayerActionType.PlayerBoost))
	{
		IsStateHoldBoost = false;
	}
//Determine the time to press the B button
		if (Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerStomping))
	{
		IsStateHoldStomp = true;
	}
		if (Sonic.Input.IsReleased(Sonic.PlayerActionType.PlayerStomping))
	{
		IsStateHoldStomp = false;
	}


//Hold down the RT and press the B to Drift
		if(Sonic.IsGrounded() && Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerStomping)&&!Sonic.IsSideView())
		{	
			if(IsStateHoldBoost && IsStateSonicNotDead )
				{
				Sonic.State.SetState(Sonic.StateID.StateDrift);
				}
		}
		
		if(Sonic.State.GetCurrentStateID() == Sonic.StateID.StateDrift)
		{	
			if(horzMag<100f &&Sonic.IsGrounded() && IsStateSonicNotDead)
			{
			*kinematics.Velocity += *kinematics.Velocity;
			}
		}
		
//Air Drift End
		if(!Sonic.IsGrounded()&&Sonic.State.GetCurrentStateID() == Sonic.StateID.StateDrift&&IsStateSonicNotDead)
		{
			Sonic.State.SetState(Sonic.StateID.StateFall);
		}
		if(!Sonic.IsGrounded()&&Sonic.State.GetCurrentStateID() == Sonic.StateID.StateDriftAir&&IsStateSonicNotDead)
		{
			Sonic.State.SetState(Sonic.StateID.StateFall);
		}
		if(!Sonic.IsGrounded()&&Sonic.State.GetCurrentStateID() == Sonic.StateID.StateDriftDash&&IsStateSonicNotDead)
		{
			Sonic.State.SetState(Sonic.StateID.StateFall);
		}
////////////////////////////////////////////////Drift End
	    if (Sonic.Input.IsReleased(Sonic.PlayerActionType.PlayerStomping) &&! IsStateHoldStomp)
		{
			if(Sonic.IsGrounded()&&IsStateSonicNotDead)
			{
				Sonic.State.SetState(Sonic.StateID.StateRun);
			}
		}


///////////////////////////////////////////////EX Bump Jump
	
	if (IsStateSonicNotDead
	&&Sonic.State.GetCurrentStateID() == Sonic.StateID.StateDoubleJump 
	&& IsStateHoldBoost 
	&& !Sonic.IsGrounded() 
	//&& Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerJump)
		){
			Sonic.State.SetState(Sonic.StateID.StateBumpJump);
			//*kinematics.Velocity +=Sonic.Kinematics.GetForward() * (0.45f);
			*kinematics.Velocity +=*kinematics.Velocity*0.3f;
		}
	if (IsStateSonicNotDead
	&&Sonic.State.GetCurrentStateID() == Sonic.StateID.StateGrindDoubleJump 
	&& IsStateHoldBoost 
	&& !Sonic.IsGrounded() 
	//&& Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerJump)
	){
			Sonic.State.SetState(Sonic.StateID.StateBumpJump);
			//*kinematics.Velocity +=Sonic.Kinematics.GetForward() * (0.45f);
			*kinematics.Velocity +=*kinematics.Velocity*0.3f;
		}
	if (Sonic.State.GetCurrentStateID() == Sonic.StateID.StateAirBoost 
	&& !Sonic.IsGrounded() 
	&& Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerJump))
		{
			if(IsStateSonicNotDead 
			&& !IsStateAfterBounceJump)
			{
				Sonic.State.SetState(Sonic.StateID.StateBounceJump);
				*kinematics.Velocity +=Sonic.Kinematics.GetForward() * (2.0f);
				*kinematics.Velocity +=*kinematics.Velocity*0.15f;
				IsStateAfterBounceJump=true;
			}
		}
	if (Sonic.State.GetCurrentStateID() == Sonic.StateID.StateJumpBoardLaunch 
	&& !Sonic.IsGrounded() 
	&& Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerJump) 
	&& IsStateSonicNotDead)
		{
			Sonic.State.SetState(Sonic.StateID.StateBumpJump);
		}
	if (Sonic.State.GetCurrentStateID() == Sonic.StateID.StateBumpJump 
	&& Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerAttack))
		{
			if(IsStateSonicNotDead&&Sonic.State.GetCurrentStateID() !=Sonic.StateID.StateHomingAttack)
			{
				Sonic.State.SetState(Sonic.StateID.StateRecoveryJump);
				*kinematics.Velocity +=*kinematics.Velocity*2.0f;
			}
		}
//Bump Double Jump
	if (IsStateSonicNotDead&&Sonic.State.GetCurrentStateID() == Sonic.StateID.StateBumpJump 
	&& Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerJump)
	&&!Sonic.IsGrounded())
		{
			Sonic.State.SetState(Sonic.StateID.StateRecoveryJump);
			*kinematics.Velocity +=*kinematics.Velocity*2.0f;
		}
//Easy EX Homing Boost
	if (Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerJump))
		{
		IsStateHoldJump=true;
		}
	if (Sonic.Input.IsReleased(Sonic.PlayerActionType.PlayerJump))
		{
		IsStateHoldJump=false;
		}
	if (IsStateHoldJump
	&&IsStateHoldBoost 
	&& !Sonic.IsGrounded() 
	&& Sonic.State.GetCurrentStateID() == Sonic.StateID.StateHomingAttack 
	&& IsStateSonicNotDead)
		{
			Sonic.State.SetState(Sonic.StateID.StateAirBoost);
			//Sonic.Animation.SetAnimation("SELECTJUMP_F_LOOP");
		}
/////////////////////////////////////////////////////Higher Double Jump

	if(IsHigherDoubleJump
	&&Sonic.State.GetCurrentStateID() == Sonic.StateID.StateDoubleJump
	){
	Sonic.Animation.SetAnimation("SELECTJUMP_U_LOOP");
	}
	
	if(IsHigherDoubleJump
	&&Sonic.State.GetCurrentStateID() == Sonic.StateID.StateJump
	){
	Sonic.Animation.SetAnimation("JUMP_BALL");
	}
	
	if (!IsStateHoldBoost&&!Sonic.IsGrounded() 
	&& Sonic.State.GetCurrentStateID() == Sonic.StateID.StateDoubleJump
	&&IsHigherDoubleJump)
		{
			if(!IsStateAfterBounceJump&& IsStateSonicNotDead)
			{
				//Sonic.State.SetState(Sonic.StateID.StateBounceJump);
				*kinematics.Velocity +=new Vector3(0.0f,3.5f,0.0f);
				Sonic.Effect.PlayEffect("HigherDoubleJump1", "ec_so_pow_boost_impact_fv01_burst01");
				Sonic.Effect.PlayEffect("HigherDoubleJump1", "ec_so_pow_boost_impact_fv01_burst01");
				Sonic.Effect.PlayEffect("HigherDoubleJump2", "ec_pl_hit_accelerator01_gpu01");
				Sonic.Effect.StopEffect("HigherDoubleJump1");
				Sonic.Effect.StopEffect("HigherDoubleJump1");
				Sonic.Effect.StopEffect("HigherDoubleJump2");
				IsStateAfterBounceJump=true;
			}
		}
		if (!IsStateHoldBoost&&!Sonic.IsGrounded() 
		&& Sonic.State.GetCurrentStateID() == Sonic.StateID.StateGrindDoubleJump)
		{
			if(!IsStateAfterBounceJump && IsStateSonicNotDead)
			{
				//Sonic.State.SetState(Sonic.StateID.StateBounceJump);
				*kinematics.Velocity +=new Vector3(0.0f,3.5f,0.0f);
				Sonic.Effect.PlayEffect("HigherDoubleJump1", "ec_so_pow_boost_impact_fv01_burst01");
				Sonic.Effect.PlayEffect("HigherDoubleJump1", "ec_so_pow_boost_impact_fv01_burst01");
				Sonic.Effect.PlayEffect("HigherDoubleJump2", "ec_pl_hit_accelerator01_gpu01");
				Sonic.Effect.StopEffect("HigherDoubleJump1");
				Sonic.Effect.StopEffect("HigherDoubleJump1");
				Sonic.Effect.StopEffect("HigherDoubleJump2");
				IsStateAfterBounceJump=true;
			}
		}
		
		
		if(Sonic.State.GetCurrentStateID() == Sonic.StateID.StateBumpJump
		&&Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerJump)
		){
		Sonic.Effect.PlayEffect("HigherDoubleJump1", "ef_so_skill_chargeatk01");
		Sonic.Effect.PlayEffect("HigherDoubleJump1", "ef_so_skill_chargeatk01");
		Sonic.Effect.PlayEffect("HigherDoubleJump1", "ef_so_skill_chargeatk01");
		}
		
		if(Sonic.State.GetCurrentStateID() != Sonic.StateID.StateBumpJump)
		{
		Sonic.Effect.StopEffect("HigherDoubleJump1");
		Sonic.Effect.StopEffect("HigherDoubleJump1");
		Sonic.Effect.StopEffect("HigherDoubleJump1");
		}
///////////////////////////////////////////////Stomp+Jump
	if(Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateStompingDown&&Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerJump)&& IsStateSonicNotDead)
	{
		Sonic.State.SetState(Sonic.StateID.StateCloudJump);
	}
///////////////////////////////////////////////Fall Slope edit
	if(IsStateSonicNotDead&&Sonic.State.GetCurrentStateID() == Sonic.StateID.StateFallSlope&&Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerJump)&& IsStateSonicNotDead)
	{
		Sonic.State.SetState(Sonic.StateID.StateBounceJump);
		*kinematics.Velocity +=*kinematics.Velocity*6.55f;
	}
///////////////////////////////////////////////StateGrind+B deceleration Reverse
	if(Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateGrind&&Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerStomping)&&IsStateSonicNotDead)
	{
		//Sonic.State.SetState(Sonic.StateID.StateWallJump);
		Sonic.Effect.PlayEffect("GrindReB1", "ef_ft_brake_neutral01_boost_fw03");
		Sonic.Effect.PlayEffect("GrindReB2", "ef_ft_brake_neutral01_boost_ge01");
		Sonic.Effect.PlayEffect("GrindReB3", "ef_ft_brake_neutral01_boost_md02");
		Sonic.Sound.PlaySound("sn_sonic_boom");
		*kinematics.Rotation =*kinematics.Rotation*new Quaternion(-1f,0f,0f,0f);
		*kinematics.Velocity = new Vector3(0.0f,0.0f,0.0f);
		Sonic.State.SetState(Sonic.StateID.StateFall);
	}
	if(Sonic.State.GetCurrentStateID() !=Sonic.StateID.StateGrind||!IsStateSonicNotDead){
		Sonic.Effect.StopEffect("GrindReB1");
		Sonic.Effect.StopEffect("GrindReB2");
		Sonic.Effect.StopEffect("GrindReB3");
	}
	
///////////////////////////////////////////////StateGrind+LT Spin
	if(Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateGrind&&Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerSonicboom)&&IsStateSonicNotDead)
	{
		Sonic.Animation.SetAnimation("JUMP_BALL");
		Sonic.Sound.PlaySound("sn_spindash");
		Sonic.Effect.PlayEffect("GrindSpinLT1", "ec_ft_pow_dash_ge01_lightning_line01");
		Sonic.Effect.PlayEffect("GrindSpinLT1", "ec_ft_pow_dash_ge01_lightning_line01");
		Sonic.Effect.PlayEffect("GrindSpinLT2", "ec_ft_pow_dash_ge01_blue_line01");
		if(horzMag < 100f)
		{
		*kinematics.Velocity +=*kinematics.Velocity*1.5f;
		}
	}
	
	if(Sonic.State.GetCurrentStateID() !=Sonic.StateID.StateGrind||!IsStateHoldSpin){
	Sonic.Effect.StopEffect("GrindSpinLT1");
	Sonic.Effect.StopEffect("GrindSpinLT2");
	int soundSpinLT = Sonic.Sound.PlaySound("sn_spindash");
	Sonic.Sound.StopSound(&soundSpinLT);
	}
///////////////////////////////////////////////StateGrind+X Speed Up Lite
	if(Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateGrind
	&&Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerAttack)
	&&IsStateSonicNotDead)
	{
		Sonic.Sound.PlaySound("sn_windmill_kick");
		Sonic.Effect.PlayEffect("GrindSpinX1", "ec_so_pow_boost_impact_fv01_burst01");
		Sonic.Effect.PlayEffect("GrindSpinX2", "ec_so_pow_boost_impact_fv01_distortion01");
		if(horzMag < 100f)
		{
		*kinematics.Velocity +=*kinematics.Velocity*1.5f;
		}
	}
	if(Sonic.State.GetCurrentStateID() !=Sonic.StateID.StateGrind||Sonic.Input.IsReleased(Sonic.PlayerActionType.PlayerAttack)){
	Sonic.Effect.StopEffect("GrindSpinX1");
	Sonic.Effect.StopEffect("GrindSpinX2");
	}
///////////////////////////////////////////////Boost Speed Up

	if(Sonic.IsGrounded()
	&&Bitwise.Test(*BlackboardStatus.GetStateFlags(), (uint)BlackboardStatus.StateFlags.IsBoost)
	&&mag<180f
	){
	*kinematics.Velocity +=Sonic.Kinematics.GetForward() * 0.05f;
	}
	
	if(Sonic.IsGrounded()
	&&IsStateHoldBoost
	&&Bitwise.Test(*BlackboardStatus.GetStateFlags(), (uint)BlackboardStatus.StateFlags.IsBoost)
	&&mag<60f
	&&Sonic.State.GetCurrentStateID() !=Sonic.StateID.StateDrift
	){
	*kinematics.Velocity +=Sonic.Kinematics.GetForward() * 0.25f;
	}
	
	
///////////////////////////////////////////////New Boost Aura
	
	if(
	Bitwise.Test(*BlackboardStatus.GetStateFlags(), (uint)BlackboardStatus.StateFlags.IsBoost)
	||Bitwise.Test(*BlackboardStatus.GetStateFlags(), (uint)BlackboardStatus.StateFlags.IsAirBoost)
	){
		if(!IsNewBoostAura&&IsStateHoldBoost)
		{
		Sonic.Effect.PlayEffect("NewBoostAura1", "ec_so_skill_psycho_aura01_st_plight01");
		Sonic.Effect.PlayEffect("NewBoostAura2", "ec_so_skill_psycho_aura01_lightning01");
		Sonic.Effect.PlayEffect("NewBoostAura3", "ec_so_skill_psycho_aura01_lightning02");
		if(Sonic.IsGrounded()
		||Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateGrind
		||Sonic.State.GetCurrentStateID() ==Sonic.StateID.StateAirBoost
		){
			Sonic.Effect.PlayEffect("NewBoostAura4", "ec_ft_pow_dash_ge01_lightning_line01");
			Sonic.Effect.PlayEffect("NewBoostAura5", "ec_ft_pow_dash_ge01_blue_line01");
			}
		IsNewBoostAura=true;
		}else{
		Sonic.Effect.StopEffect("NewBoostAura1");
		Sonic.Effect.StopEffect("NewBoostAura2");
		Sonic.Effect.StopEffect("NewBoostAura3");
		Sonic.Effect.StopEffect("NewBoostAura4");
		Sonic.Effect.StopEffect("NewBoostAura5");
		IsNewBoostAura=false;
		}
	}else{
	Sonic.Effect.StopEffect("NewBoostAura1");
	Sonic.Effect.StopEffect("NewBoostAura2");
	Sonic.Effect.StopEffect("NewBoostAura3");
	Sonic.Effect.StopEffect("NewBoostAura4");
	Sonic.Effect.StopEffect("NewBoostAura5");
	}
	
	if(Bitwise.Test(*BlackboardStatus.GetStateFlags(), (uint)BlackboardStatus.StateFlags.IsBoost)
	||Bitwise.Test(*BlackboardStatus.GetStateFlags(), (uint)BlackboardStatus.StateFlags.IsAirBoost)
	){
	if(Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerBoost)||Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerSonicboom))
		{
		Sonic.Effect.PlayEffect("NewBoostAuraHit", "ef_so_cyloop_slash_hit01");
		}
	if(Sonic.Input.IsReleased(Sonic.PlayerActionType.PlayerBoost)||Sonic.Input.IsReleased(Sonic.PlayerActionType.PlayerSonicboom))
		{
		Sonic.Effect.StopEffect("NewBoostAuraHit");
		}
	}else{
		Sonic.Effect.StopEffect("NewBoostAuraHit");
	}
///////////////////////////////////////////////Edit Goal poes
	if(Sonic.State.GetCurrentStateID() == Sonic.StateID.StateNoisyGoal)
	{
		Sonic.Animation.SetAnimation("CLOUD_JUMP_TOP");
		IsStateHoldBoost = false;
		IsStateHoldStomp = false;
		IsStateHoldJump = false;
		IsStateHoldSpin = false;
		IsStateDivingAirBoostOn = true;
		IsSpringBoardDash = false;
		IsStateAfterBounceJump =false;
		IsStateFristDiving = true;
	}
	
///////////////////////////////////////////////SpringBoardDash X button
	if(
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateSpringJump
	||Sonic.State.GetCurrentStateID() == Sonic.StateID.StateJumpBoardLaunch
	||Bitwise.Test(*BlackboardStatus.GetStateFlags(), (uint)BlackboardStatus.StateFlags.IsSpringJump)
	)
	{
		IsSpringBoardDashReady=true;
		SpringBoardDashStop=4.0f;
		IsNoHomingDash=false;
		IsSpringBoardDash=false;
	}else if(Sonic.State.GetCurrentStateID() != Sonic.StateID.StateFall)
	{
		IsSpringBoardDashReady=false;
	}
	
	if(
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateJumpBoardLaunch
	||Sonic.State.GetCurrentStateID() == Sonic.StateID.StateSpringJump
	||Bitwise.Test(*BlackboardStatus.GetStateFlags(), (uint)BlackboardStatus.StateFlags.IsSpringJump)
	){
		IsSpringBoardDash=false;
		IsSpringBoardDashReady=true;
		SpringBoardDashStop=4.0f;
	}
	
	if(
	IsStateSonicNotDead
	//&&!Bitwise.Test(*BlackboardStatus.GetStateFlags(), (uint)BlackboardStatus.StateFlags.IsHoming)
	&&Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerAttack)
	&&!Bitwise.Test(*BlackboardStatus.GetWorldFlags(), (uint)BlackboardStatus.WorldFlags.IsBattle)
	//&&Sonic.State.GetCurrentStateID() != Sonic.StateID.StateAttackRoot
	&&IsSpringBoardDashReady
	//&&!IsSpringBoardDash
	)
	{	
		if(!IsSpringBoardDash)
		{
		Sonic.State.SetState(Sonic.StateID.StateFall);
		Sonic.Animation.SetAnimation("COMBO_CHARGE_LOOP");
		Sonic.Sound.PlaySound("sn_homingshot_shoot");
		*kinematics.Velocity = new Vector3(0.0f,0.0f,0.0f);
		IsSpringBoardDash=true;
		IsSpringBoardDashReady=false;
		IsNoHomingDashReady=false;
		}else{
		IsSpringBoardDash=true;
		IsSpringBoardDashReady=false;
		IsNoHomingDashReady=false;
		}
	}
	
	if(IsStateInNormalAir
	&&Sonic.State.GetCurrentStateID() != Sonic.StateID.StateHomingAttack
	&&IsSpringBoardDash
	&&IsStateSonicNotDead
	)
	{
		if(SpringBoardDashStop>=0f)
			{
				Sonic.State.SetState(Sonic.StateID.StateFall);
				Sonic.Animation.SetAnimation("COMBO_CRASHER_LOOP");
				*kinematics.Velocity = new Vector3(0.0f,0.0f,0.0f);
				SpringBoardDashStop-=1.0f;
				return;
			}
		Sonic.Animation.SetAnimation("COMBO_CRASHER_LOOP");
		
		if(Sonic.IsSideView())
		{
			if(horzMag<175f)
			{
				*kinematics.Velocity +=Sonic.Kinematics.GetForward() *98.85f;
				*kinematics.Velocity +=new Vector3(0.0f, 0.22f, 0.0f);
			}
			}else{
				if(horzMag<285f)
			{
				*kinematics.Velocity +=Sonic.Kinematics.GetForward() *126.85f;
				*kinematics.Velocity +=new Vector3(0.0f, 0.72f, 0.0f);
			}
		}
	}
	
	
	if(
	Sonic.State.GetCurrentStateID() == Sonic.StateID.StateJumpBoardLaunch
	||Sonic.State.GetCurrentStateID() == Sonic.StateID.StateSpringJump
	||Bitwise.Test(*BlackboardStatus.GetStateFlags(), (uint)BlackboardStatus.StateFlags.IsSpringJump)
	){
		IsSpringBoardDash=false;
		IsSpringBoardDashReady=true;
		SpringBoardDashStop=4.0f;
	}
	
	if(
	Sonic.State.GetCurrentStateID() != Sonic.StateID.StateHomingAttack
	||Sonic.State.GetCurrentStateID() != Sonic.StateID.StateStomping
	||Sonic.State.GetCurrentStateID() != Sonic.StateID.StateSpinBoostCharge
	//||Sonic.State.GetCurrentStateID() != Sonic.StateID.StateGrindDoubleJump
	//||Sonic.State.GetCurrentStateID() != Sonic.StateID.StateDoubleJump
	//||Sonic.State.GetCurrentStateID() != Sonic.StateID.StateAirBoost
	||Sonic.State.GetCurrentStateID() != Sonic.StateID.StateQuickStepRoot
	||Sonic.State.GetCurrentStateID() != Sonic.StateID.StateWallActionRoot
	//||Sonic.State.GetCurrentStateID() != Sonic.StateID.StateBumpJump
	||Sonic.State.GetCurrentStateID() != Sonic.StateID.StateHangPole
	||Sonic.State.GetCurrentStateID() != Sonic.StateID.StateDivingRoot
	){IsSpringBoardDash=false;IsSpringBoardDashReady=false;}
	
	
///////////////////////////////////////////////SpringBoardDash+Double Jump
	if(IsSpringBoardDash
		&&IsStateSonicNotDead
		&&Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerJump)
	){
		Sonic.Effect.PlayEffect("SpringBoardDoubleJump","ef_so_skill_chargeatk01")
		Sonic.Sound.PlaySound("sn_short_homing");
	}else{
		Sonic.Effect.StopEffect("SpringBoardDoubleJump");
	}
///////////////////////////////////////////////Blue Homing Attack and Stomp Trail in Animation by Weezley

    if (Sonic.State.GetCurrentStateID() == Sonic.StateID.StateHomingAttack || Sonic.State.GetCurrentStateID() == Sonic.StateID.StateHomingAttackInStorm)
    {
        if (!homingPlayed)
        {
            Sonic.Effect.StopAnimationEffects();
            Sonic.Effect.PlayEffect("Homing Line", BlackboardStatus.IsSuper() ? "ec_ss_stomp_locus01" : "ec_so_stomp_locus01")
            Sonic.Animation.SetAnimation("JUMP_BALL");
            homingPlayed = true;
        }
    }
    else
    {
        homingPlayed = false;
        Sonic.Effect.StopEffect("Homing Line");
    }
	
    if (Sonic.State.GetCurrentStateID() == Sonic.StateID.StateStompingDown && !BlackboardStatus.IsSuper())
    {
        if (!stompPlayed)
        {
            Sonic.Effect.PlayEffect("Stomp Line", "ec_ft_pow_dash_ge01_round_blue01")
            Sonic.Effect.PlayEffect("Stomp Line", "ec_ft_pow_dash_ge01_round_blue01")
            Sonic.Effect.PlayEffect("Stomp Line", "ec_ft_pow_dash_ge01_round_blue01")
            stompPlayed = true;
        }
    }
    else
    {
        stompPlayed = false;
        Sonic.Effect.StopEffect("Stomp Line")
    }

///////////////////////////////////////////////Edit Homing effect
	if(Sonic.State.GetCurrentStateID() == Sonic.StateID.StateHomingAttack
	&&IsStateSonicNotDead)
	{
		*kinematics.Position +=new Vector3(0.0f, 0.4f, 0.0f);
		//Sonic.Animation.SetAnimation("COMBO_CRASHER_LOOP");
		//Sonic.Effect.StopAnimationEffects();
		IsStateDivingAirBoostOn = true;
		IsStateAfterBounceJump =false;
		IsStateFristDiving = true;
	}
///////////////////////////////////////////////No Homing Dash
	
	if(NoHomingDashTime<=0.0f)
	{IsNoHomingDashReady=false;
	Sonic.Effect.StopEffect("LowHomingLine1");
	Sonic.Effect.StopEffect("LowHomingLine2");
	}else if(IsStateInNormalAir&&IsStateSonicNotDead
	//&&Sonic.State.GetCurrentStateID() != Sonic.StateID.StateHomingAttack
	//&&!Bitwise.Test(*BlackboardStatus.GetStateFlags(), (uint)BlackboardStatus.StateFlags.IsHoming)
	&&!Bitwise.Test(*BlackboardStatus.GetWorldFlags(), (uint)BlackboardStatus.WorldFlags.IsBattle))
	{IsNoHomingDashReady=true;}
	
	if(Sonic.State.GetCurrentStateID() == Sonic.StateID.StateStompingDown
	||Sonic.State.GetCurrentStateID() == Sonic.StateID.StateHomingRepelled
	||Sonic.State.GetCurrentStateID() == Sonic.StateID.StateLightDash
	||Sonic.State.GetCurrentStateID() == Sonic.StateID.StateWallActionRoot
	||Sonic.State.GetCurrentStateID() == Sonic.StateID.StateDamageRoot
	||Bitwise.Test(*BlackboardStatus.GetStateFlags(), (uint)BlackboardStatus.StateFlags.IsHoming)
	)
	{IsNoHomingDashReady=true;}
	
	
	if(IsNoHomingDashReady
	&&Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerAttack)
	&&IsStateInNormalAir
	&&IsStateSonicNotDead
	&&Sonic.State.GetCurrentStateID() != Sonic.StateID.StateHomingAttack
	//&&!Bitwise.Test(*BlackboardStatus.GetStateFlags(), (uint)BlackboardStatus.StateFlags.IsHoming)
	&&!Bitwise.Test(*BlackboardStatus.GetStateFlags(), (uint)BlackboardStatus.StateFlags.IsSpringJump)
	&&!Bitwise.Test(*BlackboardStatus.GetWorldFlags(), (uint)BlackboardStatus.WorldFlags.IsBattle)
	&&!IsSpringBoardDash
	)
	{	
		IsNoHomingDash=true;
		if(NoHomingDashTime==10.0f)
		{
			Sonic.Effect.StopAnimationEffects();
			IsNoHomingDashReady=true;
			Sonic.Sound.PlaySound("sn_crossslash_shoot");
			*kinematics.Velocity = new Vector3(0.0f,0.0f,0.0f)
			Sonic.Effect.PlayEffect("LowHomingLine1", "ec_ft_pow_dash_ge01_lightning_line01");
			Sonic.Effect.PlayEffect("LowHomingLine1", "ec_ft_pow_dash_ge01_lightning_line01");
			Sonic.Effect.PlayEffect("LowHomingLine2", "ec_ft_pow_dash_ge01_blue_line01");
		}else if(NoHomingDashTime<=0.0f){
			IsNoHomingDashReady=true;
			IsNoHomingDash=false;
			NoHomingDashTime=10.0f;
			Sonic.Effect.StopEffect("LowHomingLine1");
			Sonic.Effect.StopEffect("LowHomingLine1");
			Sonic.Effect.StopEffect("LowHomingLine2");
		}
	}
	
	if(
	IsNoHomingDash
	&&NoHomingDashTime>0.0f
	&&IsStateSonicNotDead
	&&IsStateInNormalAir
	//&&Sonic.State.GetCurrentStateID() != Sonic.StateID.StateHomingAttack
	//&&!Bitwise.Test(*BlackboardStatus.GetStateFlags(), (uint)BlackboardStatus.StateFlags.IsHoming)
	&&!Bitwise.Test(*BlackboardStatus.GetWorldFlags(), (uint)BlackboardStatus.WorldFlags.IsBattle)
	&&Sonic.State.GetCurrentStateID() != Sonic.StateID.StateSpringJump
	&&Sonic.State.GetCurrentStateID() != Sonic.StateID.StateJumpBoardLaunch
	)
		{
		if(Sonic.State.GetCurrentStateID() == Sonic.StateID.StateHomingAttack)
		{return;}
		NoHomingDashTime-=0.5333f;
		Sonic.State.SetState(Sonic.StateID.StateFall);
		Sonic.Animation.SetAnimation("JUMP_BALL");
		if(horzMag<20f)
			{
			if(Sonic.IsSideView())
				{
				*kinematics.Velocity +=Sonic.Kinematics.GetForward() * (10.00f);
				*kinematics.Velocity +=new Vector3(0.0f,1.25f,0.0f);//Resist gravity descent
				}else{
				*kinematics.Velocity +=Sonic.Kinematics.GetForward() * (20.00f);
				*kinematics.Velocity +=new Vector3(0.0f,1.25f,0.0f);//Resist gravity descent
				}
			}
		//Set dash time, 0~10 and.333 or .666 Number that cannot be divided by an integer
		//The smaller the number, the longer the dash time
		//The larger the number, the shorter the dash time
		}
	if(NoHomingDashTime<0.0f
	&&IsStateSonicNotDead
	&&!Sonic.IsGrounded()
	)
		{
		Sonic.Effect.StopEffect("LowHomingLine1");
		Sonic.Effect.StopEffect("LowHomingLine1");
		Sonic.Effect.StopEffect("LowHomingLine2");
		if(
		IsStateInNormalAir
		&&Sonic.State.GetCurrentStateID() != Sonic.StateID.StateAirBoost
		&&Sonic.State.GetCurrentStateID() != Sonic.StateID.StateDivingRoot
		&&Sonic.State.GetCurrentStateID() != Sonic.StateID.StateAttackRoot
		&&Sonic.State.GetCurrentStateID() != Sonic.StateID.StateWallActionRoot
		&&Sonic.State.GetCurrentStateID() != Sonic.StateID.StateJumpBoardLaunch
		&&Sonic.State.GetCurrentStateID() != Sonic.StateID.StateSpringJump
		&&!Bitwise.Test(*BlackboardStatus.GetStateFlags(), (uint)BlackboardStatus.StateFlags.IsSpringJump)
		//&&!Bitwise.Test(*BlackboardStatus.GetStateFlags(), (uint)BlackboardStatus.StateFlags.IsHoming)
		)
			{
			if(Sonic.State.GetCurrentStateID() == Sonic.StateID.StateHomingAttack)
			{return;}
			Sonic.State.SetState(Sonic.StateID.StateFall);
			Sonic.Animation.SetAnimation("BUMP_JUMP_FALL");
			*kinematics.Velocity = new Vector3(0.0f,0.0f,0.0f);
			if(Sonic.IsSideView())
			{*kinematics.Velocity +=Sonic.Kinematics.GetForward() * (12.00f);
			}else{*kinematics.Velocity +=Sonic.Kinematics.GetForward() * (15.00f);}
			NoHomingDashTime=0.0f;
			}
		}

///////////////////////////////////////////////State ID initialization
	
	
	if(Sonic.State.GetCurrentStateID() == Sonic.StateID.StateAirBoost)
	{
		IsStateDivingAirBoostOn = false;
		IsSpringBoardDash=false;
		IsSpringBoardDashReady=false;
		SpringBoardDashStop=4.0f;
	}
	if (Sonic.IsGrounded()
	|| Sonic.State.GetCurrentStateID() == Sonic.StateID.StateStompingFlip 
	|| Sonic.State.GetCurrentStateID() == Sonic.StateID.StateStompingBounce 
	|| Sonic.State.GetCurrentStateID() == Sonic.StateID.StateHomingAttack
	|| Sonic.State.GetCurrentStateID() == Sonic.StateID.StateSpringJump
	|| Sonic.State.GetCurrentStateID() == Sonic.StateID.StateGrind
	)
    {
		IsStateDivingAirBoostOn = true;
		IsStateAfterBounceJump =false;
		IsStateFristDiving = true;
		Sonic.Effect.StopEffect("LowHomingLine1");
		Sonic.Effect.StopEffect("LowHomingLine1");
		Sonic.Effect.StopEffect("LowHomingLine2");
		IsSpringBoardDash=false;
		IsSpringBoardDashReady=true;
		SpringBoardDashStop=4.0f;
		IsNoHomingDashReady=true;
		IsNoHomingDash=false;
		NoHomingDashTime=10.0f;
		IsStateInNormalAir=false;
    }
///////////////////////////////////////////////Dead Drift initialization
	if (Sonic.State.GetCurrentStateID() == Sonic.StateID.StateFallingDead 
	|| Sonic.State.GetCurrentStateID() == Sonic.StateID.StateNoisyGoal 
	||Sonic.State.GetCurrentStateID() == Sonic.StateID.StateDead 
	|| Sonic.State.GetCurrentStateID() == Sonic.StateID.StateLavaDead 
	|| Sonic.State.GetCurrentStateID() == Sonic.StateID.StatePressDead 
	|| Sonic.State.GetCurrentStateID() == Sonic.StateID.StateSuffocatingDead 
	|| Sonic.State.GetCurrentStateID() == Sonic.StateID.StateUpDead)
	{
		IsStateHoldBoost = false;
		IsStateHoldStomp = false;
		IsStateHoldJump = false;
		IsStateHoldSpin = false;
		Sonic.Effect.StopEffect("Stomp Line")
		Sonic.Effect.StopEffect("Homing Line");
		Sonic.Effect.StopEffect("LowHomingLine1");
		Sonic.Effect.StopEffect("LowHomingLine1");
		Sonic.Effect.StopEffect("LowHomingLine2");
		IsSpringBoardDash=false;
		IsSpringBoardDashReady=true;
		SpringBoardDashStop=4.0f;
		IsNoHomingDashReady=true;
		IsNoHomingDash=false;
		NoHomingDashTime=10.0f;
		IsStateInNormalAir=false;
		Sonic.Effect.StopEffect("GrindSpinLT1");
		Sonic.Effect.StopEffect("GrindSpinLT1");
		Sonic.Effect.StopEffect("GrindSpinLT2");
		Sonic.Effect.StopEffect("NewBoostAura1");
		Sonic.Effect.StopEffect("NewBoostAura2");
		Sonic.Effect.StopEffect("NewBoostAura3");
		Sonic.Effect.StopEffect("NewBoostAura4");
		Sonic.Effect.StopEffect("NewBoostAura5");
		Sonic.Effect.StopEffect("NewBoostAuraHit");
		int soundSpinLT = Sonic.Sound.PlaySound("sn_spindash");
		Sonic.Sound.StopSound(&soundSpinLT);
		Sonic.Effect.StopEffect("HigherDoubleJump1");
	}
}
